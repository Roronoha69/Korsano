{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar utils = require('./utils');\n\nvar _require = require('./Error'),\n    StripeError = _require.StripeError,\n    StripeSignatureVerificationError = _require.StripeSignatureVerificationError;\n\nvar Webhook = {\n  DEFAULT_TOLERANCE: 300,\n  // 5 minutes\n  constructEvent: function constructEvent(payload, header, secret, tolerance, cryptoProvider) {\n    this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider);\n    var jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n  constructEventAsync: function constructEventAsync(payload, header, secret, tolerance, cryptoProvider) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var jsonPayload;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.signature.verifyHeaderAsync(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider);\n\n            case 2:\n              jsonPayload = JSON.parse(payload);\n              return _context.abrupt(\"return\", jsonPayload);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n\n  /**\n   * Generates a header to be used for webhook mocking\n   *\n   * @typedef {object} opts\n   * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n   * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n   * @property {string} secret - Stripe webhook secret 'whsec_...'\n   * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n   * @property {string} signature - Computed webhook signature\n   * @property {CryptoProvider} cryptoProvider - Crypto provider to use for computing the signature if none was provided. Defaults to NodeCryptoProvider.\n   */\n  generateTestHeaderString: function generateTestHeaderString(opts) {\n    if (!opts) {\n      throw new StripeError({\n        message: 'Options are required'\n      });\n    }\n\n    opts.timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n    opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n    opts.cryptoProvider = opts.cryptoProvider || getNodeCryptoProvider();\n    opts.signature = opts.signature || opts.cryptoProvider.computeHMACSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n    var generatedHeader = ['t=' + opts.timestamp, opts.scheme + '=' + opts.signature].join(',');\n    return generatedHeader;\n  }\n};\nvar signature = {\n  EXPECTED_SCHEME: 'v1',\n  verifyHeader: function verifyHeader(encodedPayload, encodedHeader, secret, tolerance, cryptoProvider) {\n    var _parseEventDetails = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME),\n        header = _parseEventDetails.decodedHeader,\n        payload = _parseEventDetails.decodedPayload,\n        details = _parseEventDetails.details;\n\n    cryptoProvider = cryptoProvider || getNodeCryptoProvider();\n    var expectedSignature = cryptoProvider.computeHMACSignature(makeHMACContent(payload, details), secret);\n    validateComputedSignature(payload, header, details, expectedSignature, tolerance);\n    return true;\n  },\n  verifyHeaderAsync: function verifyHeaderAsync(encodedPayload, encodedHeader, secret, tolerance, cryptoProvider) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var _parseEventDetails2, header, payload, details, expectedSignature;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _parseEventDetails2 = parseEventDetails(encodedPayload, encodedHeader, _this2.EXPECTED_SCHEME), header = _parseEventDetails2.decodedHeader, payload = _parseEventDetails2.decodedPayload, details = _parseEventDetails2.details;\n              cryptoProvider = cryptoProvider || getNodeCryptoProvider();\n              _context2.next = 4;\n              return cryptoProvider.computeHMACSignatureAsync(makeHMACContent(payload, details), secret);\n\n            case 4:\n              expectedSignature = _context2.sent;\n              return _context2.abrupt(\"return\", validateComputedSignature(payload, header, details, expectedSignature, tolerance));\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n};\n\nfunction makeHMACContent(payload, details) {\n  return \"\".concat(details.timestamp, \".\").concat(payload);\n}\n\nfunction parseEventDetails(encodedPayload, encodedHeader, expectedScheme) {\n  var decodedPayload = Buffer.isBuffer(encodedPayload) ? encodedPayload.toString('utf8') : encodedPayload; // Express's type for `Request#headers` is `string | []string`\n  // which is because the `set-cookie` header is an array,\n  // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n  // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n\n  if (Array.isArray(encodedHeader)) {\n    throw new Error('Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.');\n  }\n\n  var decodedHeader = Buffer.isBuffer(encodedHeader) ? encodedHeader.toString('utf8') : encodedHeader;\n  var details = parseHeader(decodedHeader, expectedScheme);\n\n  if (!details || details.timestamp === -1) {\n    throw new StripeSignatureVerificationError({\n      message: 'Unable to extract timestamp and signatures from header',\n      detail: {\n        decodedHeader: decodedHeader,\n        decodedPayload: decodedPayload\n      }\n    });\n  }\n\n  if (!details.signatures.length) {\n    throw new StripeSignatureVerificationError({\n      message: 'No signatures found with expected scheme',\n      detail: {\n        decodedHeader: decodedHeader,\n        decodedPayload: decodedPayload\n      }\n    });\n  }\n\n  return {\n    decodedPayload: decodedPayload,\n    decodedHeader: decodedHeader,\n    details: details\n  };\n}\n\nfunction validateComputedSignature(payload, header, details, expectedSignature, tolerance) {\n  var signatureFound = !!details.signatures.filter(utils.secureCompare.bind(utils, expectedSignature)).length;\n\n  if (!signatureFound) {\n    throw new StripeSignatureVerificationError({\n      message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe?' + ' https://github.com/stripe/stripe-node#webhook-signing',\n      detail: {\n        header: header,\n        payload: payload\n      }\n    });\n  }\n\n  var timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n  if (tolerance > 0 && timestampAge > tolerance) {\n    throw new StripeSignatureVerificationError({\n      message: 'Timestamp outside the tolerance zone',\n      detail: {\n        header: header,\n        payload: payload\n      }\n    });\n  }\n\n  return true;\n}\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce(function (accum, item) {\n    var kv = item.split('=');\n\n    if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n    }\n\n    if (kv[0] === scheme) {\n      accum.signatures.push(kv[1]);\n    }\n\n    return accum;\n  }, {\n    timestamp: -1,\n    signatures: []\n  });\n}\n\nvar webhooksNodeCryptoProviderInstance = null;\n/**\n * Lazily instantiate a NodeCryptoProvider instance. This is a stateless object\n * so a singleton can be used here.\n */\n\nfunction getNodeCryptoProvider() {\n  if (!webhooksNodeCryptoProviderInstance) {\n    var NodeCryptoProvider = require('./crypto/NodeCryptoProvider');\n\n    webhooksNodeCryptoProviderInstance = new NodeCryptoProvider();\n  }\n\n  return webhooksNodeCryptoProviderInstance;\n}\n\nWebhook.signature = signature;\nmodule.exports = Webhook;","map":{"version":3,"names":["utils","require","StripeError","StripeSignatureVerificationError","Webhook","DEFAULT_TOLERANCE","constructEvent","payload","header","secret","tolerance","cryptoProvider","signature","verifyHeader","jsonPayload","JSON","parse","constructEventAsync","verifyHeaderAsync","generateTestHeaderString","opts","message","timestamp","Math","floor","Date","now","scheme","EXPECTED_SCHEME","getNodeCryptoProvider","computeHMACSignature","generatedHeader","join","encodedPayload","encodedHeader","parseEventDetails","decodedHeader","decodedPayload","details","expectedSignature","makeHMACContent","validateComputedSignature","computeHMACSignatureAsync","expectedScheme","Buffer","isBuffer","toString","Array","isArray","Error","parseHeader","detail","signatures","length","signatureFound","filter","secureCompare","bind","timestampAge","split","reduce","accum","item","kv","push","webhooksNodeCryptoProviderInstance","NodeCryptoProvider","module","exports"],"sources":["/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/stripe/lib/Webhooks.js"],"sourcesContent":["'use strict';\n\nconst utils = require('./utils');\nconst {StripeError, StripeSignatureVerificationError} = require('./Error');\n\nconst Webhook = {\n  DEFAULT_TOLERANCE: 300, // 5 minutes\n\n  constructEvent(payload, header, secret, tolerance, cryptoProvider) {\n    this.signature.verifyHeader(\n      payload,\n      header,\n      secret,\n      tolerance || Webhook.DEFAULT_TOLERANCE,\n      cryptoProvider\n    );\n\n    const jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n\n  async constructEventAsync(\n    payload,\n    header,\n    secret,\n    tolerance,\n    cryptoProvider\n  ) {\n    await this.signature.verifyHeaderAsync(\n      payload,\n      header,\n      secret,\n      tolerance || Webhook.DEFAULT_TOLERANCE,\n      cryptoProvider\n    );\n\n    const jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n\n  /**\n   * Generates a header to be used for webhook mocking\n   *\n   * @typedef {object} opts\n   * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n   * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n   * @property {string} secret - Stripe webhook secret 'whsec_...'\n   * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n   * @property {string} signature - Computed webhook signature\n   * @property {CryptoProvider} cryptoProvider - Crypto provider to use for computing the signature if none was provided. Defaults to NodeCryptoProvider.\n   */\n  generateTestHeaderString: function(opts) {\n    if (!opts) {\n      throw new StripeError({\n        message: 'Options are required',\n      });\n    }\n\n    opts.timestamp =\n      Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n    opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n\n    opts.cryptoProvider = opts.cryptoProvider || getNodeCryptoProvider();\n\n    opts.signature =\n      opts.signature ||\n      opts.cryptoProvider.computeHMACSignature(\n        opts.timestamp + '.' + opts.payload,\n        opts.secret\n      );\n\n    const generatedHeader = [\n      't=' + opts.timestamp,\n      opts.scheme + '=' + opts.signature,\n    ].join(',');\n\n    return generatedHeader;\n  },\n};\n\nconst signature = {\n  EXPECTED_SCHEME: 'v1',\n\n  verifyHeader(\n    encodedPayload,\n    encodedHeader,\n    secret,\n    tolerance,\n    cryptoProvider\n  ) {\n    const {\n      decodedHeader: header,\n      decodedPayload: payload,\n      details,\n    } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n\n    cryptoProvider = cryptoProvider || getNodeCryptoProvider();\n    const expectedSignature = cryptoProvider.computeHMACSignature(\n      makeHMACContent(payload, details),\n      secret\n    );\n\n    validateComputedSignature(\n      payload,\n      header,\n      details,\n      expectedSignature,\n      tolerance\n    );\n\n    return true;\n  },\n\n  async verifyHeaderAsync(\n    encodedPayload,\n    encodedHeader,\n    secret,\n    tolerance,\n    cryptoProvider\n  ) {\n    const {\n      decodedHeader: header,\n      decodedPayload: payload,\n      details,\n    } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n\n    cryptoProvider = cryptoProvider || getNodeCryptoProvider();\n\n    const expectedSignature = await cryptoProvider.computeHMACSignatureAsync(\n      makeHMACContent(payload, details),\n      secret\n    );\n\n    return validateComputedSignature(\n      payload,\n      header,\n      details,\n      expectedSignature,\n      tolerance\n    );\n  },\n};\n\nfunction makeHMACContent(payload, details) {\n  return `${details.timestamp}.${payload}`;\n}\n\nfunction parseEventDetails(encodedPayload, encodedHeader, expectedScheme) {\n  const decodedPayload = Buffer.isBuffer(encodedPayload)\n    ? encodedPayload.toString('utf8')\n    : encodedPayload;\n\n  // Express's type for `Request#headers` is `string | []string`\n  // which is because the `set-cookie` header is an array,\n  // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n  // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n  if (Array.isArray(encodedHeader)) {\n    throw new Error(\n      'Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.'\n    );\n  }\n\n  const decodedHeader = Buffer.isBuffer(encodedHeader)\n    ? encodedHeader.toString('utf8')\n    : encodedHeader;\n\n  const details = parseHeader(decodedHeader, expectedScheme);\n\n  if (!details || details.timestamp === -1) {\n    throw new StripeSignatureVerificationError({\n      message: 'Unable to extract timestamp and signatures from header',\n      detail: {\n        decodedHeader,\n        decodedPayload,\n      },\n    });\n  }\n\n  if (!details.signatures.length) {\n    throw new StripeSignatureVerificationError({\n      message: 'No signatures found with expected scheme',\n      detail: {\n        decodedHeader,\n        decodedPayload,\n      },\n    });\n  }\n\n  return {\n    decodedPayload,\n    decodedHeader,\n    details,\n  };\n}\n\nfunction validateComputedSignature(\n  payload,\n  header,\n  details,\n  expectedSignature,\n  tolerance\n) {\n  const signatureFound = !!details.signatures.filter(\n    utils.secureCompare.bind(utils, expectedSignature)\n  ).length;\n\n  if (!signatureFound) {\n    throw new StripeSignatureVerificationError({\n      message:\n        'No signatures found matching the expected signature for payload.' +\n        ' Are you passing the raw request body you received from Stripe?' +\n        ' https://github.com/stripe/stripe-node#webhook-signing',\n      detail: {\n        header,\n        payload,\n      },\n    });\n  }\n\n  const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n  if (tolerance > 0 && timestampAge > tolerance) {\n    throw new StripeSignatureVerificationError({\n      message: 'Timestamp outside the tolerance zone',\n      detail: {\n        header,\n        payload,\n      },\n    });\n  }\n\n  return true;\n}\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce(\n    (accum, item) => {\n      const kv = item.split('=');\n\n      if (kv[0] === 't') {\n        accum.timestamp = kv[1];\n      }\n\n      if (kv[0] === scheme) {\n        accum.signatures.push(kv[1]);\n      }\n\n      return accum;\n    },\n    {\n      timestamp: -1,\n      signatures: [],\n    }\n  );\n}\n\nlet webhooksNodeCryptoProviderInstance = null;\n\n/**\n * Lazily instantiate a NodeCryptoProvider instance. This is a stateless object\n * so a singleton can be used here.\n */\nfunction getNodeCryptoProvider() {\n  if (!webhooksNodeCryptoProviderInstance) {\n    const NodeCryptoProvider = require('./crypto/NodeCryptoProvider');\n    webhooksNodeCryptoProviderInstance = new NodeCryptoProvider();\n  }\n  return webhooksNodeCryptoProviderInstance;\n}\n\nWebhook.signature = signature;\n\nmodule.exports = Webhook;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}