{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar crypto = require('crypto');\n\nvar CryptoProvider = require('./CryptoProvider');\n/**\n * `CryptoProvider which uses the Node `crypto` package for its computations.\n */\n\n\nvar NodeCryptoProvider = /*#__PURE__*/function (_CryptoProvider) {\n  _inherits(NodeCryptoProvider, _CryptoProvider);\n\n  var _super = _createSuper(NodeCryptoProvider);\n\n  function NodeCryptoProvider() {\n    _classCallCheck(this, NodeCryptoProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NodeCryptoProvider, [{\n    key: \"computeHMACSignature\",\n    value:\n    /** @override */\n    function computeHMACSignature(payload, secret) {\n      return crypto.createHmac('sha256', secret).update(payload, 'utf8').digest('hex');\n    }\n    /** @override */\n\n  }, {\n    key: \"computeHMACSignatureAsync\",\n    value: function () {\n      var _computeHMACSignatureAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(payload, secret) {\n        var signature;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.computeHMACSignature(payload, secret);\n\n              case 2:\n                signature = _context.sent;\n                return _context.abrupt(\"return\", signature);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function computeHMACSignatureAsync(_x, _x2) {\n        return _computeHMACSignatureAsync.apply(this, arguments);\n      }\n\n      return computeHMACSignatureAsync;\n    }()\n  }]);\n\n  return NodeCryptoProvider;\n}(CryptoProvider);\n\nmodule.exports = NodeCryptoProvider;","map":{"version":3,"names":["crypto","require","CryptoProvider","NodeCryptoProvider","payload","secret","createHmac","update","digest","computeHMACSignature","signature","module","exports"],"sources":["/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/stripe/lib/crypto/NodeCryptoProvider.js"],"sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\n\nconst CryptoProvider = require('./CryptoProvider');\n\n/**\n * `CryptoProvider which uses the Node `crypto` package for its computations.\n */\nclass NodeCryptoProvider extends CryptoProvider {\n  /** @override */\n  computeHMACSignature(payload, secret) {\n    return crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex');\n  }\n\n  /** @override */\n  async computeHMACSignatureAsync(payload, secret) {\n    const signature = await this.computeHMACSignature(payload, secret);\n    return signature;\n  }\n}\n\nmodule.exports = NodeCryptoProvider;\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;AAEA;AACA;AACA;;;IACME,kB;;;;;;;;;;;;;;IACJ;IACA,8BAAqBC,OAArB,EAA8BC,MAA9B,EAAsC;MACpC,OAAOL,MAAM,CACVM,UADI,CACO,QADP,EACiBD,MADjB,EAEJE,MAFI,CAEGH,OAFH,EAEY,MAFZ,EAGJI,MAHI,CAGG,KAHH,CAAP;IAID;IAED;;;;;kGACA,iBAAgCJ,OAAhC,EAAyCC,MAAzC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC0B,KAAKI,oBAAL,CAA0BL,OAA1B,EAAmCC,MAAnC,CAD1B;;cAAA;gBACQK,SADR;gBAAA,iCAESA,SAFT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;EAV+BR,c;;AAgBjCS,MAAM,CAACC,OAAP,GAAiBT,kBAAjB"},"metadata":{},"sourceType":"script"}