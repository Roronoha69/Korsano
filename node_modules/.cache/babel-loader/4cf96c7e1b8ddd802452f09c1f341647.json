{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar CryptoProvider = require('./CryptoProvider');\n/**\n * `CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n *\n * This only supports asynchronous operations.\n */\n\n\nvar SubtleCryptoProvider = /*#__PURE__*/function (_CryptoProvider) {\n  _inherits(SubtleCryptoProvider, _CryptoProvider);\n\n  var _super = _createSuper(SubtleCryptoProvider);\n\n  function SubtleCryptoProvider(subtleCrypto) {\n    var _this;\n\n    _classCallCheck(this, SubtleCryptoProvider);\n\n    _this = _super.call(this); // If no subtle crypto is interface, default to the global namespace. This\n    // is to allow custom interfaces (eg. using the Node webcrypto interface in\n    // tests).\n\n    _this.subtleCrypto = subtleCrypto || crypto.subtle;\n    return _this;\n  }\n  /** @override */\n\n\n  _createClass(SubtleCryptoProvider, [{\n    key: \"computeHMACSignature\",\n    value: function computeHMACSignature(payload, secret) {\n      throw new Error('SubtleCryptoProvider cannot be used in a synchronous context.');\n    }\n    /** @override */\n\n  }, {\n    key: \"computeHMACSignatureAsync\",\n    value: function () {\n      var _computeHMACSignatureAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(payload, secret) {\n        var encoder, key, signatureBuffer, signatureBytes, signatureHexCodes, i;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                encoder = new TextEncoder('utf-8');\n                _context.next = 3;\n                return this.subtleCrypto.importKey('raw', encoder.encode(secret), {\n                  name: 'HMAC',\n                  hash: {\n                    name: 'SHA-256'\n                  }\n                }, false, ['sign']);\n\n              case 3:\n                key = _context.sent;\n                _context.next = 6;\n                return this.subtleCrypto.sign('hmac', key, encoder.encode(payload));\n\n              case 6:\n                signatureBuffer = _context.sent;\n                // crypto.subtle returns the signature in base64 format. This must be\n                // encoded in hex to match the CryptoProvider contract. We map each byte in\n                // the buffer to its corresponding hex octet and then combine into a string.\n                signatureBytes = new Uint8Array(signatureBuffer);\n                signatureHexCodes = new Array(signatureBytes.length);\n\n                for (i = 0; i < signatureBytes.length; i++) {\n                  signatureHexCodes[i] = byteHexMapping[signatureBytes[i]];\n                }\n\n                return _context.abrupt(\"return\", signatureHexCodes.join(''));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function computeHMACSignatureAsync(_x, _x2) {\n        return _computeHMACSignatureAsync.apply(this, arguments);\n      }\n\n      return computeHMACSignatureAsync;\n    }()\n  }]);\n\n  return SubtleCryptoProvider;\n}(CryptoProvider); // Cached mapping of byte to hex representation. We do this once to avoid re-\n// computing every time we need to convert the result of a signature to hex.\n\n\nvar byteHexMapping = new Array(256);\n\nfor (var i = 0; i < byteHexMapping.length; i++) {\n  byteHexMapping[i] = i.toString(16).padStart(2, '0');\n}\n\nmodule.exports = SubtleCryptoProvider;","map":{"version":3,"names":["CryptoProvider","require","SubtleCryptoProvider","subtleCrypto","crypto","subtle","payload","secret","Error","encoder","TextEncoder","importKey","encode","name","hash","key","sign","signatureBuffer","signatureBytes","Uint8Array","signatureHexCodes","Array","length","i","byteHexMapping","join","toString","padStart","module","exports"],"sources":["/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/stripe/lib/crypto/SubtleCryptoProvider.js"],"sourcesContent":["'use strict';\n\nconst CryptoProvider = require('./CryptoProvider');\n\n/**\n * `CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n *\n * This only supports asynchronous operations.\n */\nclass SubtleCryptoProvider extends CryptoProvider {\n  constructor(subtleCrypto) {\n    super();\n\n    // If no subtle crypto is interface, default to the global namespace. This\n    // is to allow custom interfaces (eg. using the Node webcrypto interface in\n    // tests).\n    this.subtleCrypto = subtleCrypto || crypto.subtle;\n  }\n\n  /** @override */\n  computeHMACSignature(payload, secret) {\n    throw new Error(\n      'SubtleCryptoProvider cannot be used in a synchronous context.'\n    );\n  }\n\n  /** @override */\n  async computeHMACSignatureAsync(payload, secret) {\n    const encoder = new TextEncoder('utf-8');\n\n    const key = await this.subtleCrypto.importKey(\n      'raw',\n      encoder.encode(secret),\n      {\n        name: 'HMAC',\n        hash: {name: 'SHA-256'},\n      },\n      false,\n      ['sign']\n    );\n\n    const signatureBuffer = await this.subtleCrypto.sign(\n      'hmac',\n      key,\n      encoder.encode(payload)\n    );\n\n    // crypto.subtle returns the signature in base64 format. This must be\n    // encoded in hex to match the CryptoProvider contract. We map each byte in\n    // the buffer to its corresponding hex octet and then combine into a string.\n    const signatureBytes = new Uint8Array(signatureBuffer);\n    const signatureHexCodes = new Array(signatureBytes.length);\n\n    for (let i = 0; i < signatureBytes.length; i++) {\n      signatureHexCodes[i] = byteHexMapping[signatureBytes[i]];\n    }\n\n    return signatureHexCodes.join('');\n  }\n}\n\n// Cached mapping of byte to hex representation. We do this once to avoid re-\n// computing every time we need to convert the result of a signature to hex.\nconst byteHexMapping = new Array(256);\nfor (let i = 0; i < byteHexMapping.length; i++) {\n  byteHexMapping[i] = i.toString(16).padStart(2, '0');\n}\n\nmodule.exports = SubtleCryptoProvider;\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;;;IACMC,oB;;;;;EACJ,8BAAYC,YAAZ,EAA0B;IAAA;;IAAA;;IACxB,0BADwB,CAGxB;IACA;IACA;;IACA,MAAKA,YAAL,GAAoBA,YAAY,IAAIC,MAAM,CAACC,MAA3C;IANwB;EAOzB;EAED;;;;;WACA,8BAAqBC,OAArB,EAA8BC,MAA9B,EAAsC;MACpC,MAAM,IAAIC,KAAJ,CACJ,+DADI,CAAN;IAGD;IAED;;;;;kGACA,iBAAgCF,OAAhC,EAAyCC,MAAzC;QAAA;QAAA;UAAA;YAAA;cAAA;gBACQE,OADR,GACkB,IAAIC,WAAJ,CAAgB,OAAhB,CADlB;gBAAA;gBAAA,OAGoB,KAAKP,YAAL,CAAkBQ,SAAlB,CAChB,KADgB,EAEhBF,OAAO,CAACG,MAAR,CAAeL,MAAf,CAFgB,EAGhB;kBACEM,IAAI,EAAE,MADR;kBAEEC,IAAI,EAAE;oBAACD,IAAI,EAAE;kBAAP;gBAFR,CAHgB,EAOhB,KAPgB,EAQhB,CAAC,MAAD,CARgB,CAHpB;;cAAA;gBAGQE,GAHR;gBAAA;gBAAA,OAcgC,KAAKZ,YAAL,CAAkBa,IAAlB,CAC5B,MAD4B,EAE5BD,GAF4B,EAG5BN,OAAO,CAACG,MAAR,CAAeN,OAAf,CAH4B,CAdhC;;cAAA;gBAcQW,eAdR;gBAoBE;gBACA;gBACA;gBACMC,cAvBR,GAuByB,IAAIC,UAAJ,CAAeF,eAAf,CAvBzB;gBAwBQG,iBAxBR,GAwB4B,IAAIC,KAAJ,CAAUH,cAAc,CAACI,MAAzB,CAxB5B;;gBA0BE,KAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGL,cAAc,CAACI,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;kBAC9CH,iBAAiB,CAACG,CAAD,CAAjB,GAAuBC,cAAc,CAACN,cAAc,CAACK,CAAD,CAAf,CAArC;gBACD;;gBA5BH,iCA8BSH,iBAAiB,CAACK,IAAlB,CAAuB,EAAvB,CA9BT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;EAlBiCzB,c,GAoDnC;AACA;;;AACA,IAAMwB,cAAc,GAAG,IAAIH,KAAJ,CAAU,GAAV,CAAvB;;AACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,cAAc,CAACF,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;EAC9CC,cAAc,CAACD,CAAD,CAAd,GAAoBA,CAAC,CAACG,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CAApB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB3B,oBAAjB"},"metadata":{},"sourceType":"script"}