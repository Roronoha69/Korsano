{"ast":null,"code":"import React, { createContext, useEffect, useState } from \"react\";\nimport ArcPath from \"./ArcPath\";\nimport LegendItem from \"./LegendItem\";\nexport const DonutChartContext = /*#__PURE__*/createContext(undefined);\n\nconst DonutChart = _ref => {\n  let {\n    className = \"donutchart\",\n    clickToggle = true,\n    colorFunction = (colors, index) => colors[index % colors.length],\n    colors = [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\", \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\", \"#ffeb3b\", \"#ffc107\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\"],\n    data = [{\n      className: \"\",\n      label: \"\",\n      value: 100,\n      isEmpty: true\n    }],\n    emptyColor = \"#e0e0e0\",\n    emptyOffset = 0.08,\n    formatValues = (value, total) => Number.isNaN(value / total) ? \"--\" : `${(value / total * 100).toFixed(2)}%`,\n    height = 500,\n    interactive = true,\n    innerRadius = 0.7,\n    legend = true,\n    onMouseEnter = item => item,\n    onMouseLeave = item => item,\n    onClick = (item, toggled) => toggled ? item : null,\n    outerRadius = 0.9,\n    selectedOffset = 0.03,\n    strokeColor = \"#212121\",\n    toggledOffset = 0.04,\n    width = 750\n  } = _ref;\n  const [selected, setSelected] = useState(interactive ? data[0] : null);\n  const [toggleSelect, setToggleSelect] = useState(false);\n  useEffect(() => {\n    if (interactive) {\n      setSelected(data[0]);\n      setToggleSelect(false);\n    }\n  }, [interactive, data]);\n  const graphWidth = legend ? width * (2 / 3) : width;\n  const total = data.reduce((sum, _ref2) => {\n    let {\n      value\n    } = _ref2;\n    return sum + value;\n  }, 0);\n  const {\n    dataWithRenderProps\n  } = data.reduce((_ref3, item, index) => {\n    let {\n      angle,\n      dataWithRenderProps\n    } = _ref3;\n    const {\n      className,\n      isEmpty,\n      label,\n      value\n    } = item;\n    const isSelected = selected?.label === label;\n    const isToggled = isSelected && toggleSelect;\n    return {\n      angle: angle + value / total * 360,\n      dataWithRenderProps: [...dataWithRenderProps, {\n        angle,\n        index,\n        ...item,\n        classNames: `${className ?? \"\"} ${isEmpty ? \"empty\" : \"\"} ${isSelected ? \"selected\" : \"\"} ${isToggled ? \"toggled\" : \"\"}`.trim(),\n        fill: isEmpty ? emptyColor : colorFunction(colors, index),\n        opacity: isSelected && !toggleSelect ? 0.5 : 1,\n        stroke: isEmpty ? emptyColor : strokeColor,\n        clickHandlers: interactive ? {\n          onClick: () => {\n            if (selected?.label === label) {\n              const toggle = clickToggle ? !toggleSelect : false;\n              setSelected(item);\n              setToggleSelect(toggle);\n              onClick(item, toggle);\n            }\n          },\n          onMouseEnter: () => {\n            if (!toggleSelect) {\n              setSelected(item);\n              onMouseEnter(item);\n            }\n          },\n          onMouseLeave: () => {\n            if (!toggleSelect) {\n              onMouseLeave(item);\n            }\n          }\n        } : undefined\n      }],\n      total: total + value\n    };\n  }, {\n    angle: 0,\n    dataWithRenderProps: []\n  });\n  return /*#__PURE__*/React.createElement(DonutChartContext.Provider, {\n    value: {\n      className,\n      emptyOffset,\n      graphWidth,\n      innerRadius,\n      outerRadius,\n      selected,\n      selectedOffset,\n      toggledOffset,\n      toggleSelect,\n      total,\n      width\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    className: className,\n    style: {\n      height,\n      width\n    },\n    viewBox: `0 0 ${width} ${height}`\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-arcs`\n  }, dataWithRenderProps.map(item => /*#__PURE__*/React.createElement(ArcPath, {\n    item: item,\n    key: `arcpath${item.index}`\n  }))), selected && /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-innertext`\n  }, /*#__PURE__*/React.createElement(\"text\", {\n    className: `${className}-innertext-label`,\n    x: graphWidth / 2,\n    y: \"45%\",\n    textAnchor: \"middle\"\n  }, selected.label), /*#__PURE__*/React.createElement(\"text\", {\n    className: `${className}-innertext-value`,\n    x: graphWidth / 2,\n    y: \"60%\",\n    textAnchor: \"middle\"\n  }, formatValues(selected.value, total))), legend && /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-legend`\n  }, dataWithRenderProps.map(item => /*#__PURE__*/React.createElement(LegendItem, {\n    key: `legenditem${item.index}`,\n    item: item\n  })))));\n};\n\nexport default DonutChart;","map":{"version":3,"names":["React","createContext","useEffect","useState","ArcPath","LegendItem","DonutChartContext","undefined","DonutChart","className","clickToggle","colorFunction","colors","index","length","data","label","value","isEmpty","emptyColor","emptyOffset","formatValues","total","Number","isNaN","toFixed","height","interactive","innerRadius","legend","onMouseEnter","item","onMouseLeave","onClick","toggled","outerRadius","selectedOffset","strokeColor","toggledOffset","width","selected","setSelected","toggleSelect","setToggleSelect","graphWidth","reduce","sum","dataWithRenderProps","angle","isSelected","isToggled","classNames","trim","fill","opacity","stroke","clickHandlers","toggle","createElement","Provider","style","viewBox","map","key","x","y","textAnchor"],"sources":["/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/react-donut-chart/dist/DonutChart.js"],"sourcesContent":["import React,{createContext,useEffect,useState}from\"react\";import ArcPath from\"./ArcPath\";import LegendItem from\"./LegendItem\";export const DonutChartContext=/*#__PURE__*/createContext(undefined);const DonutChart=({className=\"donutchart\",clickToggle=true,colorFunction=(colors,index)=>colors[index%colors.length],colors=[\"#f44336\",\"#e91e63\",\"#9c27b0\",\"#673ab7\",\"#3f51b5\",\"#2196f3\",\"#03a9f4\",\"#00bcd4\",\"#009688\",\"#4caf50\",\"#8bc34a\",\"#cddc39\",\"#ffeb3b\",\"#ffc107\",\"#ff9800\",\"#ff5722\",\"#795548\",\"#607d8b\"],data=[{className:\"\",label:\"\",value:100,isEmpty:true}],emptyColor=\"#e0e0e0\",emptyOffset=0.08,formatValues=(value,total)=>Number.isNaN(value/total)?\"--\":`${(value/total*100).toFixed(2)}%`,height=500,interactive=true,innerRadius=0.7,legend=true,onMouseEnter=item=>item,onMouseLeave=item=>item,onClick=(item,toggled)=>toggled?item:null,outerRadius=0.9,selectedOffset=0.03,strokeColor=\"#212121\",toggledOffset=0.04,width=750})=>{const[selected,setSelected]=useState(interactive?data[0]:null);const[toggleSelect,setToggleSelect]=useState(false);useEffect(()=>{if(interactive){setSelected(data[0]);setToggleSelect(false)}},[interactive,data]);const graphWidth=legend?width*(2/3):width;const total=data.reduce((sum,{value})=>sum+value,0);const{dataWithRenderProps}=data.reduce(({angle,dataWithRenderProps},item,index)=>{const{className,isEmpty,label,value}=item;const isSelected=selected?.label===label;const isToggled=isSelected&&toggleSelect;return{angle:angle+value/total*360,dataWithRenderProps:[...dataWithRenderProps,{angle,index,...item,classNames:`${className??\"\"} ${isEmpty?\"empty\":\"\"} ${isSelected?\"selected\":\"\"} ${isToggled?\"toggled\":\"\"}`.trim(),fill:isEmpty?emptyColor:colorFunction(colors,index),opacity:isSelected&&!toggleSelect?0.5:1,stroke:isEmpty?emptyColor:strokeColor,clickHandlers:interactive?{onClick:()=>{if(selected?.label===label){const toggle=clickToggle?!toggleSelect:false;setSelected(item);setToggleSelect(toggle);onClick(item,toggle)}},onMouseEnter:()=>{if(!toggleSelect){setSelected(item);onMouseEnter(item)}},onMouseLeave:()=>{if(!toggleSelect){onMouseLeave(item)}}}:undefined}],total:total+value}},{angle:0,dataWithRenderProps:[]});return/*#__PURE__*/React.createElement(DonutChartContext.Provider,{value:{className,emptyOffset,graphWidth,innerRadius,outerRadius,selected,selectedOffset,toggledOffset,toggleSelect,total,width}},/*#__PURE__*/React.createElement(\"svg\",{className:className,style:{height,width},viewBox:`0 0 ${width} ${height}`},/*#__PURE__*/React.createElement(\"g\",{className:`${className}-arcs`},dataWithRenderProps.map(item=>/*#__PURE__*/React.createElement(ArcPath,{item:item,key:`arcpath${item.index}`}))),selected&&/*#__PURE__*/React.createElement(\"g\",{className:`${className}-innertext`},/*#__PURE__*/React.createElement(\"text\",{className:`${className}-innertext-label`,x:graphWidth/2,y:\"45%\",textAnchor:\"middle\"},selected.label),/*#__PURE__*/React.createElement(\"text\",{className:`${className}-innertext-value`,x:graphWidth/2,y:\"60%\",textAnchor:\"middle\"},formatValues(selected.value,total))),legend&&/*#__PURE__*/React.createElement(\"g\",{className:`${className}-legend`},dataWithRenderProps.map(item=>/*#__PURE__*/React.createElement(LegendItem,{key:`legenditem${item.index}`,item:item})))))};export default DonutChart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}