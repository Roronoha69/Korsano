{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Deferred } from '@firebase/util';\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\n\nvar Component = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    _classCallCheck(this, Component);\n\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\"\n    /* LAZY */\n    ;\n    this.onInstanceCreated = null;\n  }\n\n  _createClass(Component, [{\n    key: \"setInstantiationMode\",\n    value: function setInstantiationMode(mode) {\n      this.instantiationMode = mode;\n      return this;\n    }\n  }, {\n    key: \"setMultipleInstances\",\n    value: function setMultipleInstances(multipleInstances) {\n      this.multipleInstances = multipleInstances;\n      return this;\n    }\n  }, {\n    key: \"setServiceProps\",\n    value: function setServiceProps(props) {\n      this.serviceProps = props;\n      return this;\n    }\n  }, {\n    key: \"setInstanceCreatedCallback\",\n    value: function setInstanceCreatedCallback(callback) {\n      this.onInstanceCreated = callback;\n      return this;\n    }\n  }]);\n\n  return Component;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\n\nvar Provider = /*#__PURE__*/function () {\n  function Provider(name, container) {\n    _classCallCheck(this, Provider);\n\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.instancesOptions = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n\n\n  _createClass(Provider, [{\n    key: \"get\",\n    value: function get(identifier) {\n      // if multipleInstances is not supported, use the default name\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n      if (!this.instancesDeferred.has(normalizedIdentifier)) {\n        var deferred = new Deferred();\n        this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n          // initialize the service if it can be auto-initialized\n          try {\n            var instance = this.getOrInitializeService({\n              instanceIdentifier: normalizedIdentifier\n            });\n\n            if (instance) {\n              deferred.resolve(instance);\n            }\n          } catch (e) {// when the instance factory throws an exception during get(), it should not cause\n            // a fatal error. We just return the unresolved promise in this case.\n          }\n        }\n      }\n\n      return this.instancesDeferred.get(normalizedIdentifier).promise;\n    }\n  }, {\n    key: \"getImmediate\",\n    value: function getImmediate(options) {\n      var _a; // if multipleInstances is not supported, use the default name\n\n\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n      var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        try {\n          return this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n        } catch (e) {\n          if (optional) {\n            return null;\n          } else {\n            throw e;\n          }\n        }\n      } else {\n        // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n        if (optional) {\n          return null;\n        } else {\n          throw Error(\"Service \".concat(this.name, \" is not available\"));\n        }\n      }\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent() {\n      return this.component;\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(component) {\n      if (component.name !== this.name) {\n        throw Error(\"Mismatching Component \".concat(component.name, \" for Provider \").concat(this.name, \".\"));\n      }\n\n      if (this.component) {\n        throw Error(\"Component for \".concat(this.name, \" has already been provided\"));\n      }\n\n      this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n\n      if (!this.shouldAutoInitialize()) {\n        return;\n      } // if the service is eager, initialize the default instance\n\n\n      if (isComponentEager(component)) {\n        try {\n          this.getOrInitializeService({\n            instanceIdentifier: DEFAULT_ENTRY_NAME\n          });\n        } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\n          // initialization, it should not cause a fatal error.\n          // TODO: Investigate if we need to make it configurable, because some component may want to cause\n          // a fatal error in this case?\n        }\n      } // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n\n\n      var _iterator = _createForOfIteratorHelper(this.instancesDeferred.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              instanceIdentifier = _step$value[0],\n              instanceDeferred = _step$value[1];\n\n          var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n          try {\n            // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n            var instance = this.getOrInitializeService({\n              instanceIdentifier: normalizedIdentifier\n            });\n            instanceDeferred.resolve(instance);\n          } catch (e) {// when the instance factory throws an exception, it should not cause\n            // a fatal error. We just leave the promise unresolved.\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"clearInstance\",\n    value: function clearInstance() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      this.instancesDeferred.delete(identifier);\n      this.instancesOptions.delete(identifier);\n      this.instances.delete(identifier);\n    } // app.delete() will call this method on every provider to delete the services\n    // TODO: should we mark the provider as deleted?\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var services;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                services = Array.from(this.instances.values());\n                _context.next = 3;\n                return Promise.all([].concat(_toConsumableArray(services.filter(function (service) {\n                  return 'INTERNAL' in service;\n                }) // legacy services\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                .map(function (service) {\n                  return service.INTERNAL.delete();\n                })), _toConsumableArray(services.filter(function (service) {\n                  return '_delete' in service;\n                }) // modularized services\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                .map(function (service) {\n                  return service._delete();\n                }))));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"isComponentSet\",\n    value: function isComponentSet() {\n      return this.component != null;\n    }\n  }, {\n    key: \"isInitialized\",\n    value: function isInitialized() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      return this.instances.has(identifier);\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      return this.instancesOptions.get(identifier) || {};\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _opts$options = opts.options,\n          options = _opts$options === void 0 ? {} : _opts$options;\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n\n      if (this.isInitialized(normalizedIdentifier)) {\n        throw Error(\"\".concat(this.name, \"(\").concat(normalizedIdentifier, \") has already been initialized\"));\n      }\n\n      if (!this.isComponentSet()) {\n        throw Error(\"Component \".concat(this.name, \" has not been registered yet\"));\n      }\n\n      var instance = this.getOrInitializeService({\n        instanceIdentifier: normalizedIdentifier,\n        options: options\n      }); // resolve any pending promise waiting for the service instance\n\n      var _iterator2 = _createForOfIteratorHelper(this.instancesDeferred.entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              instanceIdentifier = _step2$value[0],\n              instanceDeferred = _step2$value[1];\n\n          var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n          if (normalizedIdentifier === normalizedDeferredIdentifier) {\n            instanceDeferred.resolve(instance);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return instance;\n    }\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\n\n  }, {\n    key: \"onInit\",\n    value: function onInit(callback, identifier) {\n      var _a;\n\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n      var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n      existingCallbacks.add(callback);\n      this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n      var existingInstance = this.instances.get(normalizedIdentifier);\n\n      if (existingInstance) {\n        callback(existingInstance, normalizedIdentifier);\n      }\n\n      return function () {\n        existingCallbacks.delete(callback);\n      };\n    }\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\n\n  }, {\n    key: \"invokeOnInitCallbacks\",\n    value: function invokeOnInitCallbacks(instance, identifier) {\n      var callbacks = this.onInitCallbacks.get(identifier);\n\n      if (!callbacks) {\n        return;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(callbacks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var callback = _step3.value;\n\n          try {\n            callback(instance, identifier);\n          } catch (_a) {// ignore errors in the onInit callback\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"getOrInitializeService\",\n    value: function getOrInitializeService(_ref) {\n      var instanceIdentifier = _ref.instanceIdentifier,\n          _ref$options = _ref.options,\n          options = _ref$options === void 0 ? {} : _ref$options;\n      var instance = this.instances.get(instanceIdentifier);\n\n      if (!instance && this.component) {\n        instance = this.component.instanceFactory(this.container, {\n          instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n          options: options\n        });\n        this.instances.set(instanceIdentifier, instance);\n        this.instancesOptions.set(instanceIdentifier, options);\n        /**\r\n         * Invoke onInit listeners.\r\n         * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n         * while onInit listeners are registered by consumers of the provider.\r\n         */\n\n        this.invokeOnInitCallbacks(instance, instanceIdentifier);\n        /**\r\n         * Order is important\r\n         * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n         * makes `isInitialized()` return true.\r\n         */\n\n        if (this.component.onInstanceCreated) {\n          try {\n            this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n          } catch (_a) {// ignore errors in the onInstanceCreatedCallback\n          }\n        }\n      }\n\n      return instance || null;\n    }\n  }, {\n    key: \"normalizeInstanceIdentifier\",\n    value: function normalizeInstanceIdentifier() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n\n      if (this.component) {\n        return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n      } else {\n        return identifier; // assume multiple instances are supported before the component is provided.\n      }\n    }\n  }, {\n    key: \"shouldAutoInitialize\",\n    value: function shouldAutoInitialize() {\n      return !!this.component && this.component.instantiationMode !== \"EXPLICIT\"\n      /* EXPLICIT */\n      ;\n    }\n  }]);\n\n  return Provider;\n}(); // undefined should be passed to the service factory for the default instance\n\n\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\"\n  /* EAGER */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nvar ComponentContainer = /*#__PURE__*/function () {\n  function ComponentContainer(name) {\n    _classCallCheck(this, ComponentContainer);\n\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n\n\n  _createClass(ComponentContainer, [{\n    key: \"addComponent\",\n    value: function addComponent(component) {\n      var provider = this.getProvider(component.name);\n\n      if (provider.isComponentSet()) {\n        throw new Error(\"Component \".concat(component.name, \" has already been registered with \").concat(this.name));\n      }\n\n      provider.setComponent(component);\n    }\n  }, {\n    key: \"addOrOverwriteComponent\",\n    value: function addOrOverwriteComponent(component) {\n      var provider = this.getProvider(component.name);\n\n      if (provider.isComponentSet()) {\n        // delete the existing provider from the container, so we can register the new component\n        this.providers.delete(component.name);\n      }\n\n      this.addComponent(component);\n    }\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\n\n  }, {\n    key: \"getProvider\",\n    value: function getProvider(name) {\n      if (this.providers.has(name)) {\n        return this.providers.get(name);\n      } // create a Provider for a service that hasn't registered with Firebase\n\n\n      var provider = new Provider(name, this);\n      this.providers.set(name, provider);\n      return provider;\n    }\n  }, {\n    key: \"getProviders\",\n    value: function getProviders() {\n      return Array.from(this.providers.values());\n    }\n  }]);\n\n  return ComponentContainer;\n}();\n\nexport { Component, ComponentContainer, Provider };","map":{"version":3,"sources":["../../src/component.ts","../../src/constants.ts","../../src/provider.ts","../../src/component_container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}