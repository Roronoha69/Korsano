{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  var requestMethod = (spec.method || 'GET').toUpperCase();\n  var urlParams = spec.urlParams || [];\n\n  var encode = spec.encode || function (data) {\n    return data;\n  };\n\n  var isUsingFullPath = !!spec.fullPath;\n  var commandPath = utils.makeURLInterpolator(isUsingFullPath ? spec.fullPath : spec.path || ''); // When using fullPath, we ignore the resource path as it should already be\n  // fully qualified.\n\n  var path = isUsingFullPath ? spec.fullPath : self.createResourcePathWithSymbols(spec.path); // Don't mutate args externally.\n\n  var args = [].slice.call(requestArgs); // Generate and validate url params.\n\n  var urlData = urlParams.reduce(function (urlData, param) {\n    var arg = args.shift();\n\n    if (typeof arg !== 'string') {\n      throw new Error(\"Stripe: Argument \\\"\".concat(param, \"\\\" must be a string, but got: \").concat(arg, \" (on API request to `\").concat(requestMethod, \" \").concat(path, \"`)\"));\n    }\n\n    urlData[param] = arg;\n    return urlData;\n  }, {}); // Pull request data and options (headers, auth) from args.\n\n  var dataFromArgs = utils.getDataFromArgs(args);\n  var data = encode(Object.assign({}, dataFromArgs, overrideData));\n  var options = utils.getOptionsFromArgs(args);\n  var host = options.host || spec.host;\n  var streaming = !!spec.streaming; // Validate that there are no more args.\n\n  if (args.filter(function (x) {\n    return x != null;\n  }).length) {\n    throw new Error(\"Stripe: Unknown arguments (\".concat(args, \"). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to \").concat(requestMethod, \" `\").concat(path, \"`)\"));\n  } // When using full path, we can just invoke the URL interpolator directly\n  // as we don't need to use the resource to create a full path.\n\n\n  var requestPath = isUsingFullPath ? commandPath(urlData) : self.createFullPath(commandPath, urlData);\n  var headers = Object.assign(options.headers, spec.headers);\n\n  if (spec.validator) {\n    spec.validator(data, {\n      headers: headers\n    });\n  }\n\n  var dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n  var bodyData = dataInQuery ? {} : data;\n  var queryData = dataInQuery ? data : {};\n  return {\n    requestMethod: requestMethod,\n    requestPath: requestPath,\n    bodyData: bodyData,\n    queryData: queryData,\n    auth: options.auth,\n    headers: headers,\n    host: host,\n    streaming: streaming,\n    settings: options.settings\n  };\n}\n\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise(function (resolve, reject) {\n    var opts;\n\n    try {\n      opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n      }\n    }\n\n    var emptyQuery = Object.keys(opts.queryData).length === 0;\n    var path = [opts.requestPath, emptyQuery ? '' : '?', utils.stringifyRequestData(opts.queryData)].join('');\n    var _opts = opts,\n        headers = _opts.headers,\n        settings = _opts.settings;\n\n    self._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.auth, {\n      headers: headers,\n      settings: settings,\n      streaming: opts.streaming\n    }, requestCallback);\n  });\n}\n\nmodule.exports = makeRequest;","map":{"version":3,"names":["utils","require","getRequestOpts","self","requestArgs","spec","overrideData","requestMethod","method","toUpperCase","urlParams","encode","data","isUsingFullPath","fullPath","commandPath","makeURLInterpolator","path","createResourcePathWithSymbols","args","slice","call","urlData","reduce","param","arg","shift","Error","dataFromArgs","getDataFromArgs","Object","assign","options","getOptionsFromArgs","host","streaming","filter","x","length","requestPath","createFullPath","headers","validator","dataInQuery","bodyData","queryData","auth","settings","makeRequest","Promise","resolve","reject","opts","err","requestCallback","response","transformResponseData","emptyQuery","keys","stringifyRequestData","join","_request","module","exports"],"sources":["/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/stripe/lib/makeRequest.js"],"sourcesContent":["'use strict';\n\nconst utils = require('./utils');\n\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  const requestMethod = (spec.method || 'GET').toUpperCase();\n  const urlParams = spec.urlParams || [];\n  const encode = spec.encode || ((data) => data);\n\n  const isUsingFullPath = !!spec.fullPath;\n  const commandPath = utils.makeURLInterpolator(\n    isUsingFullPath ? spec.fullPath : spec.path || ''\n  );\n  // When using fullPath, we ignore the resource path as it should already be\n  // fully qualified.\n  const path = isUsingFullPath\n    ? spec.fullPath\n    : self.createResourcePathWithSymbols(spec.path);\n\n  // Don't mutate args externally.\n  const args = [].slice.call(requestArgs);\n\n  // Generate and validate url params.\n  const urlData = urlParams.reduce((urlData, param) => {\n    const arg = args.shift();\n    if (typeof arg !== 'string') {\n      throw new Error(\n        `Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`\n      );\n    }\n\n    urlData[param] = arg;\n    return urlData;\n  }, {});\n\n  // Pull request data and options (headers, auth) from args.\n  const dataFromArgs = utils.getDataFromArgs(args);\n  const data = encode(Object.assign({}, dataFromArgs, overrideData));\n  const options = utils.getOptionsFromArgs(args);\n  const host = options.host || spec.host;\n  const streaming = !!spec.streaming;\n  // Validate that there are no more args.\n  if (args.filter((x) => x != null).length) {\n    throw new Error(\n      `Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`\n    );\n  }\n\n  // When using full path, we can just invoke the URL interpolator directly\n  // as we don't need to use the resource to create a full path.\n  const requestPath = isUsingFullPath\n    ? commandPath(urlData)\n    : self.createFullPath(commandPath, urlData);\n  const headers = Object.assign(options.headers, spec.headers);\n\n  if (spec.validator) {\n    spec.validator(data, {headers});\n  }\n\n  const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n  const bodyData = dataInQuery ? {} : data;\n  const queryData = dataInQuery ? data : {};\n\n  return {\n    requestMethod,\n    requestPath,\n    bodyData,\n    queryData,\n    auth: options.auth,\n    headers,\n    host,\n    streaming,\n    settings: options.settings,\n  };\n}\n\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise((resolve, reject) => {\n    let opts;\n    try {\n      opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(\n          spec.transformResponseData\n            ? spec.transformResponseData(response)\n            : response\n        );\n      }\n    }\n\n    const emptyQuery = Object.keys(opts.queryData).length === 0;\n    const path = [\n      opts.requestPath,\n      emptyQuery ? '' : '?',\n      utils.stringifyRequestData(opts.queryData),\n    ].join('');\n\n    const {headers, settings} = opts;\n\n    self._request(\n      opts.requestMethod,\n      opts.host,\n      path,\n      opts.bodyData,\n      opts.auth,\n      {headers, settings, streaming: opts.streaming},\n      requestCallback\n    );\n  });\n}\n\nmodule.exports = makeRequest;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}