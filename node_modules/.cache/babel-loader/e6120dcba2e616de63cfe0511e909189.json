{"ast":null,"code":"'use strict';\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\n\nvar _classCallCheck = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar CryptoProvider = /*#__PURE__*/function () {\n  function CryptoProvider() {\n    _classCallCheck(this, CryptoProvider);\n  }\n\n  _createClass(CryptoProvider, [{\n    key: \"computeHMACSignature\",\n    value:\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    function computeHMACSignature(payload, secret) {\n      throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n\n  }, {\n    key: \"computeHMACSignatureAsync\",\n    value: function computeHMACSignatureAsync(payload, secret) {\n      throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n  }]);\n\n  return CryptoProvider;\n}();\n\nmodule.exports = CryptoProvider;","map":{"version":3,"names":["CryptoProvider","payload","secret","Error","module","exports"],"sources":["/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/stripe/lib/crypto/CryptoProvider.js"],"sourcesContent":["'use strict';\n\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nclass CryptoProvider {\n  /**\n   * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n   * The output HMAC should be encoded in hexadecimal.\n   *\n   * Sample values for implementations:\n   * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n   * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n   */\n  computeHMACSignature(payload, secret) {\n    throw new Error('computeHMACSignature not implemented.');\n  }\n\n  /**\n   * Asynchronous version of `computeHMACSignature`. Some implementations may\n   * only allow support async signature computation.\n   *\n   * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n   * The output HMAC should be encoded in hexadecimal.\n   *\n   * Sample values for implementations:\n   * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n   * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n   */\n  computeHMACSignatureAsync(payload, secret) {\n    throw new Error('computeHMACSignatureAsync not implemented.');\n  }\n}\n\nmodule.exports = CryptoProvider;\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;;;;;IACMA,c;;;;;;;;IACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,8BAAqBC,OAArB,EAA8BC,MAA9B,EAAsC;MACpC,MAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mCAA0BF,OAA1B,EAAmCC,MAAnC,EAA2C;MACzC,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;IACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBL,cAAjB"},"metadata":{},"sourceType":"script"}