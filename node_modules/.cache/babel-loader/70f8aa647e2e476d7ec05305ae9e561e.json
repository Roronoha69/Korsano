{"ast":null,"code":"'use strict';\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\n\nvar _classCallCheck = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient() {\n    _classCallCheck(this, HttpClient);\n  }\n\n  _createClass(HttpClient, [{\n    key: \"getClientName\",\n    value:\n    /** The client name used for diagnostics. */\n    function getClientName() {\n      throw new Error('getClientName not implemented.');\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n      throw new Error('makeRequest not implemented.');\n    }\n    /** Helper to make a consistent timeout error across implementations. */\n\n  }], [{\n    key: \"makeTimeoutError\",\n    value: function makeTimeoutError() {\n      var timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n      timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n      return timeoutErr;\n    }\n  }]);\n\n  return HttpClient;\n}();\n\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\n\nvar HttpClientResponse = /*#__PURE__*/function () {\n  function HttpClientResponse(statusCode, headers) {\n    _classCallCheck(this, HttpClientResponse);\n\n    this._statusCode = statusCode;\n    this._headers = headers;\n  }\n\n  _createClass(HttpClientResponse, [{\n    key: \"getStatusCode\",\n    value: function getStatusCode() {\n      return this._statusCode;\n    }\n  }, {\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      return this._headers;\n    }\n  }, {\n    key: \"getRawResponse\",\n    value: function getRawResponse() {\n      throw new Error('getRawResponse not implemented.');\n    }\n  }, {\n    key: \"toStream\",\n    value: function toStream(streamCompleteCallback) {\n      throw new Error('toStream not implemented.');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      throw new Error('toJSON not implemented.');\n    }\n  }]);\n\n  return HttpClientResponse;\n}();\n\nmodule.exports = {\n  HttpClient: HttpClient,\n  HttpClientResponse: HttpClientResponse\n};","map":{"version":3,"names":["HttpClient","Error","host","port","path","method","headers","requestData","protocol","timeout","timeoutErr","TypeError","TIMEOUT_ERROR_CODE","code","CONNECTION_CLOSED_ERROR_CODES","HttpClientResponse","statusCode","_statusCode","_headers","streamCompleteCallback","module","exports"],"sources":["/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/stripe/lib/net/HttpClient.js"],"sourcesContent":["'use strict';\n\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\nclass HttpClient {\n  /** The client name used for diagnostics. */\n  getClientName() {\n    throw new Error('getClientName not implemented.');\n  }\n\n  makeRequest(\n    host,\n    port,\n    path,\n    method,\n    headers,\n    requestData,\n    protocol,\n    timeout\n  ) {\n    throw new Error('makeRequest not implemented.');\n  }\n\n  /** Helper to make a consistent timeout error across implementations. */\n  static makeTimeoutError() {\n    const timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n    timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n    return timeoutErr;\n  }\n}\n\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\n\nclass HttpClientResponse {\n  constructor(statusCode, headers) {\n    this._statusCode = statusCode;\n    this._headers = headers;\n  }\n\n  getStatusCode() {\n    return this._statusCode;\n  }\n\n  getHeaders() {\n    return this._headers;\n  }\n\n  getRawResponse() {\n    throw new Error('getRawResponse not implemented.');\n  }\n\n  toStream(streamCompleteCallback) {\n    throw new Error('toStream not implemented.');\n  }\n\n  toJSON() {\n    throw new Error('toJSON not implemented.');\n  }\n}\n\nmodule.exports = {HttpClient, HttpClientResponse};\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;IACMA,U;;;;;;;;IACJ;IACA,yBAAgB;MACd,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;IACD;;;WAED,qBACEC,IADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,MAJF,EAKEC,OALF,EAMEC,WANF,EAOEC,QAPF,EAQEC,OARF,EASE;MACA,MAAM,IAAIR,KAAJ,CAAU,8BAAV,CAAN;IACD;IAED;;;;WACA,4BAA0B;MACxB,IAAMS,UAAU,GAAG,IAAIC,SAAJ,CAAcX,UAAU,CAACY,kBAAzB,CAAnB;MACAF,UAAU,CAACG,IAAX,GAAkBb,UAAU,CAACY,kBAA7B;MACA,OAAOF,UAAP;IACD;;;;;;AAGHV,UAAU,CAACc,6BAAX,GAA2C,CAAC,YAAD,EAAe,OAAf,CAA3C;AACAd,UAAU,CAACY,kBAAX,GAAgC,WAAhC;;IAEMG,kB;EACJ,4BAAYC,UAAZ,EAAwBV,OAAxB,EAAiC;IAAA;;IAC/B,KAAKW,WAAL,GAAmBD,UAAnB;IACA,KAAKE,QAAL,GAAgBZ,OAAhB;EACD;;;;WAED,yBAAgB;MACd,OAAO,KAAKW,WAAZ;IACD;;;WAED,sBAAa;MACX,OAAO,KAAKC,QAAZ;IACD;;;WAED,0BAAiB;MACf,MAAM,IAAIjB,KAAJ,CAAU,iCAAV,CAAN;IACD;;;WAED,kBAASkB,sBAAT,EAAiC;MAC/B,MAAM,IAAIlB,KAAJ,CAAU,2BAAV,CAAN;IACD;;;WAED,kBAAS;MACP,MAAM,IAAIA,KAAJ,CAAU,yBAAV,CAAN;IACD;;;;;;AAGHmB,MAAM,CAACC,OAAP,GAAiB;EAACrB,UAAU,EAAVA,UAAD;EAAae,kBAAkB,EAAlBA;AAAb,CAAjB"},"metadata":{},"sourceType":"script"}