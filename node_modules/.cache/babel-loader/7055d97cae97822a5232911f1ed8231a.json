{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar _require = require('./Error'),\n    StripeConnectionError = _require.StripeConnectionError,\n    StripeAuthenticationError = _require.StripeAuthenticationError,\n    StripePermissionError = _require.StripePermissionError,\n    StripeRateLimitError = _require.StripeRateLimitError,\n    StripeError = _require.StripeError,\n    StripeAPIError = _require.StripeAPIError;\n\nvar _require2 = require('./net/HttpClient'),\n    HttpClient = _require2.HttpClient; // Provide extension mechanism for Stripe Resource Sub-Classes\n\n\nStripeResource.extend = utils.protoExtend; // Expose method-creator & prepared (basic) methods\n\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nvar MAX_RETRY_AFTER_WAIT = 60;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\n\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n\n  if (deprecatedUrlData) {\n    throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n  }\n\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path); // DEPRECATED: This was kept for backwards compatibility in case users were\n  // using this, but basic methods are now explicitly defined on a resource.\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function (methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize.apply(this, arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n  initialize: function initialize() {},\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n  createFullPath: function createFullPath(commandPath, urlData) {\n    return this._joinUrlParts([this.basePath(urlData), this.path(urlData), typeof commandPath == 'function' ? commandPath(urlData) : commandPath]);\n  },\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols: function createResourcePathWithSymbols(pathWithSymbols) {\n    return \"/\".concat(this._joinUrlParts([this.resourcePath, pathWithSymbols || '']));\n  },\n  _joinUrlParts: function _joinUrlParts(parts) {\n    // Replace any accidentally doubled up slashes. This previously used\n    // path.join, which would do this as well. Unfortunately we need to do this\n    // as the functions for creating paths are technically part of the public\n    // interface and so we need to preserve backwards compatibility.\n    var path = parts.join('/').replace(/\\/{2,}/g, '/'); // If the path ends with a /, we preserve the behavior of path.join and\n    // strip off the trailing / (eg. /v1/customers/ -> /v1/customers).\n\n    return path.endsWith('/') ? path.slice(0, -1) : path;\n  },\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n  _timeoutHandler: function _timeoutHandler(timeout, req, callback) {\n    return function () {\n      var timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n      req.destroy(timeoutErr);\n    };\n  },\n  _addHeadersDirectlyToObject: function _addHeadersDirectlyToObject(obj, headers) {\n    // For convenience, make some headers easily accessible on\n    // lastResponse.\n    // NOTE: Stripe responds with lowercase header names/keys.\n    obj.requestId = headers['request-id'];\n    obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n    obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n    obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n  },\n  _makeResponseEvent: function _makeResponseEvent(requestEvent, statusCode, headers) {\n    var requestEndTime = Date.now();\n    var requestDurationMs = requestEndTime - requestEvent.request_start_time;\n    return utils.removeNullish({\n      api_version: headers['stripe-version'],\n      account: headers['stripe-account'],\n      idempotency_key: headers['idempotency-key'],\n      method: requestEvent.method,\n      path: requestEvent.path,\n      status: statusCode,\n      request_id: this._getRequestId(headers),\n      elapsed: requestDurationMs,\n      request_start_time: requestEvent.request_start_time,\n      request_end_time: requestEndTime\n    });\n  },\n  _getRequestId: function _getRequestId(headers) {\n    return headers['request-id'];\n  },\n\n  /**\n   * Used by methods with spec.streaming === true. For these methods, we do not\n   * buffer successful responses into memory or do parse them into stripe\n   * objects, we delegate that all of that to the user and pass back the raw\n   * http.Response object to the callback.\n   *\n   * (Unsuccessful responses shouldn't make it here, they should\n   * still be buffered/parsed and handled by _jsonResponseHandler -- see\n   * makeRequest)\n   */\n  _streamingResponseHandler: function _streamingResponseHandler(requestEvent, callback) {\n    var _this = this;\n\n    return function (res) {\n      var headers = res.getHeaders();\n\n      var streamCompleteCallback = function streamCompleteCallback() {\n        var responseEvent = _this._makeResponseEvent(requestEvent, res.getStatusCode(), headers);\n\n        _this._stripe._emitter.emit('response', responseEvent);\n\n        _this._recordRequestMetrics(_this._getRequestId(headers), responseEvent.elapsed);\n      };\n\n      var stream = res.toStream(streamCompleteCallback); // This is here for backwards compatibility, as the stream is a raw\n      // HTTP response in Node and the legacy behavior was to mutate this\n      // response.\n\n      _this._addHeadersDirectlyToObject(stream, headers);\n\n      return callback(null, stream);\n    };\n  },\n\n  /**\n   * Default handler for Stripe responses. Buffers the response into memory,\n   * parses the JSON and returns it (i.e. passes it to the callback) if there\n   * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n   */\n  _jsonResponseHandler: function _jsonResponseHandler(requestEvent, callback) {\n    var _this2 = this;\n\n    return function (res) {\n      var headers = res.getHeaders();\n\n      var requestId = _this2._getRequestId(headers);\n\n      var statusCode = res.getStatusCode();\n\n      var responseEvent = _this2._makeResponseEvent(requestEvent, statusCode, headers);\n\n      _this2._stripe._emitter.emit('response', responseEvent);\n\n      res.toJSON().then(function (jsonResponse) {\n        if (jsonResponse.error) {\n          var err; // Convert OAuth error responses into a standard format\n          // so that the rest of the error logic can be shared\n\n          if (typeof jsonResponse.error === 'string') {\n            jsonResponse.error = {\n              type: jsonResponse.error,\n              message: jsonResponse.error_description\n            };\n          }\n\n          jsonResponse.error.headers = headers;\n          jsonResponse.error.statusCode = statusCode;\n          jsonResponse.error.requestId = requestId;\n\n          if (statusCode === 401) {\n            err = new StripeAuthenticationError(jsonResponse.error);\n          } else if (statusCode === 403) {\n            err = new StripePermissionError(jsonResponse.error);\n          } else if (statusCode === 429) {\n            err = new StripeRateLimitError(jsonResponse.error);\n          } else {\n            err = StripeError.generate(jsonResponse.error);\n          }\n\n          throw err;\n        }\n\n        return jsonResponse;\n      }, function (e) {\n        throw new StripeAPIError({\n          message: 'Invalid JSON received from the Stripe API',\n          exception: e,\n          requestId: headers['request-id']\n        });\n      }).then(function (jsonResponse) {\n        _this2._recordRequestMetrics(requestId, responseEvent.elapsed); // Expose raw response object.\n\n\n        var rawResponse = res.getRawResponse();\n\n        _this2._addHeadersDirectlyToObject(rawResponse, headers);\n\n        Object.defineProperty(jsonResponse, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: rawResponse\n        });\n        callback.call(_this2, null, jsonResponse);\n      }, function (e) {\n        return callback.call(_this2, e, null);\n      });\n    };\n  },\n  _generateConnectionErrorMessage: function _generateConnectionErrorMessage(requestRetries) {\n    return \"An error occurred with our connection to Stripe.\".concat(requestRetries > 0 ? \" Request was retried \".concat(requestRetries, \" times.\") : '');\n  },\n  _errorHandler: function _errorHandler(req, requestRetries, callback) {\n    var _this3 = this;\n\n    return function (message, detail) {\n      callback.call(_this3, new StripeConnectionError({\n        message: _this3._generateConnectionErrorMessage(requestRetries),\n        detail: error\n      }), null);\n    };\n  },\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry: function _shouldRetry(res, numRetries, maxRetries, error) {\n    if (error && numRetries === 0 && HttpClient.CONNECTION_CLOSED_ERROR_CODES.includes(error.code)) {\n      return true;\n    } // Do not retry if we are out of retries.\n\n\n    if (numRetries >= maxRetries) {\n      return false;\n    } // Retry on connection error.\n\n\n    if (!res) {\n      return true;\n    } // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n\n\n    if (res.getHeaders()['stripe-should-retry'] === 'false') {\n      return false;\n    }\n\n    if (res.getHeaders()['stripe-should-retry'] === 'true') {\n      return true;\n    } // Retry on conflict errors.\n\n\n    if (res.getStatusCode() === 409) {\n      return true;\n    } // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n\n\n    if (res.getStatusCode() >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n  _getSleepTimeInMS: function _getSleepTimeInMS(numRetries) {\n    var retryAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    var initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n\n    var maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay(); // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n\n\n    var sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay); // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n\n    sleepSeconds *= 0.5 * (1 + Math.random()); // But never sleep less than the base sleep seconds.\n\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds); // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries: function _getMaxNetworkRetries() {\n    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return settings.maxNetworkRetries && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n  },\n  _defaultIdempotencyKey: function _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    var maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return \"stripe-node-retry-\".concat(utils.uuid4());\n    }\n\n    return null;\n  },\n  _makeHeaders: function _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n    var defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? \"Bearer \".concat(auth) : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n      'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings)\n    }; // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n    //   A user agent SHOULD send a Content-Length in a request message when\n    //   no Transfer-Encoding is sent and the request method defines a meaning\n    //   for an enclosed payload body.  For example, a Content-Length header\n    //   field is normally sent in a POST request even when the value is 0\n    //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n    //   Content-Length header field when the request message does not contain\n    //   a payload body and the method semantics do not anticipate such a\n    //   body.\n    //\n    // These method types are expected to have bodies and so we should always\n    // include a Content-Length.\n\n    var methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH'; // If a content length was specified, we always include it regardless of\n    // whether the method semantics anticipate such a body. This keeps us\n    // consistent with historical behavior. We do however want to warn on this\n    // and fix these cases as they are semantically incorrect.\n\n    if (methodHasPayload || contentLength) {\n      if (!methodHasPayload) {\n        utils.emitWarning(\"\".concat(method, \" method had non-zero contentLength but no payload is expected for this verb\"));\n      }\n\n      defaultHeaders['Content-Length'] = contentLength;\n    }\n\n    return Object.assign(utils.removeNullish(defaultHeaders), // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n    utils.normalizeHeaders(userSuppliedHeaders));\n  },\n  _getUserAgentString: function _getUserAgentString() {\n    var packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n\n    var appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n    return \"Stripe/v1 NodeBindings/\".concat(packageVersion, \" \").concat(appInfo).trim();\n  },\n  _getTelemetryHeader: function _getTelemetryHeader() {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      var metrics = this._stripe._prevRequestMetrics.shift();\n\n      return JSON.stringify({\n        last_request_metrics: metrics\n      });\n    }\n  },\n  _recordRequestMetrics: function _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs\n        });\n      }\n    }\n  },\n  _request: function _request(method, host, path, data, auth) {\n    var _this4 = this;\n\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var callback = arguments.length > 6 ? arguments[6] : undefined;\n    var requestData;\n\n    var retryRequest = function retryRequest(requestFn, apiVersion, headers, requestRetries, retryAfter) {\n      return setTimeout(requestFn, _this4._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n    };\n\n    var makeRequest = function makeRequest(apiVersion, headers, numRetries) {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      var timeout = options.settings && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : _this4._stripe.getApiField('timeout');\n\n      var req = _this4._stripe.getApiField('httpClient').makeRequest(host || _this4._stripe.getApiField('host'), _this4._stripe.getApiField('port'), path, method, headers, requestData, _this4._stripe.getApiField('protocol'), timeout);\n\n      var requestStartTime = Date.now();\n      var requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method: method,\n        path: path,\n        request_start_time: requestStartTime\n      });\n      var requestRetries = numRetries || 0;\n\n      var maxRetries = _this4._getMaxNetworkRetries(options.settings);\n\n      _this4._stripe._emitter.emit('request', requestEvent);\n\n      req.then(function (res) {\n        if (_this4._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, res.getHeaders()['retry-after']);\n        } else if (options.streaming && res.getStatusCode() < 400) {\n          return _this4._streamingResponseHandler(requestEvent, callback)(res);\n        } else {\n          return _this4._jsonResponseHandler(requestEvent, callback)(res);\n        }\n      }).catch(function (error) {\n        if (_this4._shouldRetry(null, requestRetries, maxRetries, error)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n        } else {\n          var isTimeoutError = error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n          return callback.call(_this4, new StripeConnectionError({\n            message: isTimeoutError ? \"Request aborted due to timeout being reached (\".concat(timeout, \"ms)\") : _this4._generateConnectionErrorMessage(requestRetries),\n            detail: error\n          }));\n        }\n      });\n    };\n\n    var prepareAndMakeRequest = function prepareAndMakeRequest(error, data) {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      _this4._stripe.getClientUserAgent(function (clientUserAgent) {\n        var apiVersion = _this4._stripe.getApiField('version');\n\n        var headers = _this4._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, options.headers, options.settings);\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  }\n};\nmodule.exports = StripeResource;","map":{"version":3,"names":["utils","require","StripeConnectionError","StripeAuthenticationError","StripePermissionError","StripeRateLimitError","StripeError","StripeAPIError","HttpClient","StripeResource","extend","protoExtend","method","BASIC_METHODS","MAX_BUFFERED_REQUEST_METRICS","MAX_RETRY_AFTER_WAIT","stripe","deprecatedUrlData","_stripe","Error","basePath","makeURLInterpolator","getApiField","resourcePath","path","includeBasic","forEach","methodName","initialize","arguments","prototype","requestDataProcessor","validateRequest","createFullPath","commandPath","urlData","_joinUrlParts","createResourcePathWithSymbols","pathWithSymbols","parts","join","replace","endsWith","slice","wrapTimeout","callbackifyPromiseWithTimeout","_timeoutHandler","timeout","req","callback","timeoutErr","TypeError","code","destroy","_addHeadersDirectlyToObject","obj","headers","requestId","stripeAccount","apiVersion","idempotencyKey","_makeResponseEvent","requestEvent","statusCode","requestEndTime","Date","now","requestDurationMs","request_start_time","removeNullish","api_version","account","idempotency_key","status","request_id","_getRequestId","elapsed","request_end_time","_streamingResponseHandler","res","getHeaders","streamCompleteCallback","responseEvent","getStatusCode","_emitter","emit","_recordRequestMetrics","stream","toStream","_jsonResponseHandler","toJSON","then","jsonResponse","error","err","type","message","error_description","generate","e","exception","rawResponse","getRawResponse","Object","defineProperty","enumerable","writable","value","call","_generateConnectionErrorMessage","requestRetries","_errorHandler","detail","_shouldRetry","numRetries","maxRetries","CONNECTION_CLOSED_ERROR_CODES","includes","_getSleepTimeInMS","retryAfter","initialNetworkRetryDelay","getInitialNetworkRetryDelay","maxNetworkRetryDelay","getMaxNetworkRetryDelay","sleepSeconds","Math","min","pow","random","max","Number","isInteger","_getMaxNetworkRetries","settings","maxNetworkRetries","getMaxNetworkRetries","_defaultIdempotencyKey","uuid4","_makeHeaders","auth","contentLength","clientUserAgent","userSuppliedHeaders","userSuppliedSettings","defaultHeaders","Authorization","Accept","_getUserAgentString","_getTelemetryHeader","methodHasPayload","emitWarning","assign","normalizeHeaders","packageVersion","getConstant","appInfo","_appInfo","getAppInfoAsString","trim","getTelemetryEnabled","_prevRequestMetrics","length","metrics","shift","JSON","stringify","last_request_metrics","push","request_duration_ms","_request","host","data","options","requestData","retryRequest","requestFn","setTimeout","makeRequest","requestStartTime","streaming","catch","isTimeoutError","TIMEOUT_ERROR_CODE","prepareAndMakeRequest","getClientUserAgent","stringifyRequestData","module","exports"],"sources":["/mnt/c/Users/mbodj/Downloads/treact-ui/node_modules/stripe/lib/StripeResource.js"],"sourcesContent":["'use strict';\n\nconst utils = require('./utils');\nconst {\n  StripeConnectionError,\n  StripeAuthenticationError,\n  StripePermissionError,\n  StripeRateLimitError,\n  StripeError,\n  StripeAPIError,\n} = require('./Error');\n\nconst {HttpClient} = require('./net/HttpClient');\n\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils.protoExtend;\n\n// Expose method-creator & prepared (basic) methods\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\n\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nconst MAX_RETRY_AFTER_WAIT = 60;\n\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n  if (deprecatedUrlData) {\n    throw new Error(\n      'Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.'\n    );\n  }\n\n  this.basePath = utils.makeURLInterpolator(\n    this.basePath || stripe.getApiField('basePath')\n  );\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  // DEPRECATED: This was kept for backwards compatibility in case users were\n  // using this, but basic methods are now explicitly defined on a resource.\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function(methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize(...arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath(commandPath, urlData) {\n    return this._joinUrlParts([\n      this.basePath(urlData),\n      this.path(urlData),\n      typeof commandPath == 'function' ? commandPath(urlData) : commandPath,\n    ]);\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    return `/${this._joinUrlParts([this.resourcePath, pathWithSymbols || ''])}`;\n  },\n\n  _joinUrlParts(parts) {\n    // Replace any accidentally doubled up slashes. This previously used\n    // path.join, which would do this as well. Unfortunately we need to do this\n    // as the functions for creating paths are technically part of the public\n    // interface and so we need to preserve backwards compatibility.\n    const path = parts.join('/').replace(/\\/{2,}/g, '/');\n\n    // If the path ends with a /, we preserve the behavior of path.join and\n    // strip off the trailing / (eg. /v1/customers/ -> /v1/customers).\n    return path.endsWith('/') ? path.slice(0, -1) : path;\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler(timeout, req, callback) {\n    return () => {\n      const timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n\n      req.destroy(timeoutErr);\n    };\n  },\n\n  _addHeadersDirectlyToObject(obj, headers) {\n    // For convenience, make some headers easily accessible on\n    // lastResponse.\n\n    // NOTE: Stripe responds with lowercase header names/keys.\n    obj.requestId = headers['request-id'];\n    obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n    obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n    obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n  },\n\n  _makeResponseEvent(requestEvent, statusCode, headers) {\n    const requestEndTime = Date.now();\n    const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n\n    return utils.removeNullish({\n      api_version: headers['stripe-version'],\n      account: headers['stripe-account'],\n      idempotency_key: headers['idempotency-key'],\n      method: requestEvent.method,\n      path: requestEvent.path,\n      status: statusCode,\n      request_id: this._getRequestId(headers),\n      elapsed: requestDurationMs,\n      request_start_time: requestEvent.request_start_time,\n      request_end_time: requestEndTime,\n    });\n  },\n\n  _getRequestId(headers) {\n    return headers['request-id'];\n  },\n\n  /**\n   * Used by methods with spec.streaming === true. For these methods, we do not\n   * buffer successful responses into memory or do parse them into stripe\n   * objects, we delegate that all of that to the user and pass back the raw\n   * http.Response object to the callback.\n   *\n   * (Unsuccessful responses shouldn't make it here, they should\n   * still be buffered/parsed and handled by _jsonResponseHandler -- see\n   * makeRequest)\n   */\n  _streamingResponseHandler(requestEvent, callback) {\n    return (res) => {\n      const headers = res.getHeaders();\n\n      const streamCompleteCallback = () => {\n        const responseEvent = this._makeResponseEvent(\n          requestEvent,\n          res.getStatusCode(),\n          headers\n        );\n        this._stripe._emitter.emit('response', responseEvent);\n        this._recordRequestMetrics(\n          this._getRequestId(headers),\n          responseEvent.elapsed\n        );\n      };\n\n      const stream = res.toStream(streamCompleteCallback);\n\n      // This is here for backwards compatibility, as the stream is a raw\n      // HTTP response in Node and the legacy behavior was to mutate this\n      // response.\n      this._addHeadersDirectlyToObject(stream, headers);\n\n      return callback(null, stream);\n    };\n  },\n\n  /**\n   * Default handler for Stripe responses. Buffers the response into memory,\n   * parses the JSON and returns it (i.e. passes it to the callback) if there\n   * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n   */\n  _jsonResponseHandler(requestEvent, callback) {\n    return (res) => {\n      const headers = res.getHeaders();\n      const requestId = this._getRequestId(headers);\n      const statusCode = res.getStatusCode();\n\n      const responseEvent = this._makeResponseEvent(\n        requestEvent,\n        statusCode,\n        headers\n      );\n      this._stripe._emitter.emit('response', responseEvent);\n\n      res\n        .toJSON()\n        .then(\n          (jsonResponse) => {\n            if (jsonResponse.error) {\n              let err;\n\n              // Convert OAuth error responses into a standard format\n              // so that the rest of the error logic can be shared\n              if (typeof jsonResponse.error === 'string') {\n                jsonResponse.error = {\n                  type: jsonResponse.error,\n                  message: jsonResponse.error_description,\n                };\n              }\n\n              jsonResponse.error.headers = headers;\n              jsonResponse.error.statusCode = statusCode;\n              jsonResponse.error.requestId = requestId;\n\n              if (statusCode === 401) {\n                err = new StripeAuthenticationError(jsonResponse.error);\n              } else if (statusCode === 403) {\n                err = new StripePermissionError(jsonResponse.error);\n              } else if (statusCode === 429) {\n                err = new StripeRateLimitError(jsonResponse.error);\n              } else {\n                err = StripeError.generate(jsonResponse.error);\n              }\n\n              throw err;\n            }\n\n            return jsonResponse;\n          },\n          (e) => {\n            throw new StripeAPIError({\n              message: 'Invalid JSON received from the Stripe API',\n              exception: e,\n              requestId: headers['request-id'],\n            });\n          }\n        )\n        .then(\n          (jsonResponse) => {\n            this._recordRequestMetrics(requestId, responseEvent.elapsed);\n\n            // Expose raw response object.\n            const rawResponse = res.getRawResponse();\n            this._addHeadersDirectlyToObject(rawResponse, headers);\n            Object.defineProperty(jsonResponse, 'lastResponse', {\n              enumerable: false,\n              writable: false,\n              value: rawResponse,\n            });\n\n            callback.call(this, null, jsonResponse);\n          },\n          (e) => callback.call(this, e, null)\n        );\n    };\n  },\n\n  _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${\n      requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''\n    }`;\n  },\n\n  _errorHandler(req, requestRetries, callback) {\n    return (message, detail) => {\n      callback.call(\n        this,\n        new StripeConnectionError({\n          message: this._generateConnectionErrorMessage(requestRetries),\n          detail: error,\n        }),\n        null\n      );\n    };\n  },\n\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry(res, numRetries, maxRetries, error) {\n    if (\n      error &&\n      numRetries === 0 &&\n      HttpClient.CONNECTION_CLOSED_ERROR_CODES.includes(error.code)\n    ) {\n      return true;\n    }\n\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    }\n\n    // Retry on connection error.\n    if (!res) {\n      return true;\n    }\n\n    // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n    if (res.getHeaders()['stripe-should-retry'] === 'false') {\n      return false;\n    }\n    if (res.getHeaders()['stripe-should-retry'] === 'true') {\n      return true;\n    }\n\n    // Retry on conflict errors.\n    if (res.getStatusCode() === 409) {\n      return true;\n    }\n\n    // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n    if (res.getStatusCode() >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS(numRetries, retryAfter = null) {\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n\n    // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n    let sleepSeconds = Math.min(\n      initialNetworkRetryDelay * Math.pow(numRetries - 1, 2),\n      maxNetworkRetryDelay\n    );\n\n    // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n    sleepSeconds *= 0.5 * (1 + Math.random());\n\n    // But never sleep less than the base sleep seconds.\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n\n    // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries(settings = {}) {\n    return settings.maxNetworkRetries &&\n      Number.isInteger(settings.maxNetworkRetries)\n      ? settings.maxNetworkRetries\n      : this._stripe.getMaxNetworkRetries();\n  },\n\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${utils.uuid4()}`;\n    }\n    return null;\n  },\n\n  _makeHeaders(\n    auth,\n    contentLength,\n    apiVersion,\n    clientUserAgent,\n    method,\n    userSuppliedHeaders,\n    userSuppliedSettings\n  ) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n      'Idempotency-Key': this._defaultIdempotencyKey(\n        method,\n        userSuppliedSettings\n      ),\n    };\n\n    // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n    //   A user agent SHOULD send a Content-Length in a request message when\n    //   no Transfer-Encoding is sent and the request method defines a meaning\n    //   for an enclosed payload body.  For example, a Content-Length header\n    //   field is normally sent in a POST request even when the value is 0\n    //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n    //   Content-Length header field when the request message does not contain\n    //   a payload body and the method semantics do not anticipate such a\n    //   body.\n    //\n    // These method types are expected to have bodies and so we should always\n    // include a Content-Length.\n    const methodHasPayload =\n      method == 'POST' || method == 'PUT' || method == 'PATCH';\n\n    // If a content length was specified, we always include it regardless of\n    // whether the method semantics anticipate such a body. This keeps us\n    // consistent with historical behavior. We do however want to warn on this\n    // and fix these cases as they are semantically incorrect.\n    if (methodHasPayload || contentLength) {\n      if (!methodHasPayload) {\n        utils.emitWarning(\n          `${method} method had non-zero contentLength but no payload is expected for this verb`\n        );\n      }\n      defaultHeaders['Content-Length'] = contentLength;\n    }\n\n    return Object.assign(\n      utils.removeNullish(defaultHeaders),\n      // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n      utils.normalizeHeaders(userSuppliedHeaders)\n    );\n  },\n\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n    const appInfo = this._stripe._appInfo\n      ? this._stripe.getAppInfoAsString()\n      : '';\n\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  },\n\n  _getTelemetryHeader() {\n    if (\n      this._stripe.getTelemetryEnabled() &&\n      this._stripe._prevRequestMetrics.length > 0\n    ) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n      return JSON.stringify({\n        last_request_metrics: metrics,\n      });\n    }\n  },\n\n  _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (\n        this._stripe._prevRequestMetrics.length >\n        StripeResource.MAX_BUFFERED_REQUEST_METRICS\n      ) {\n        utils.emitWarning(\n          'Request metrics buffer is full, dropping telemetry message.'\n        );\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs,\n        });\n      }\n    }\n  },\n\n  _request(method, host, path, data, auth, options = {}, callback) {\n    let requestData;\n\n    const retryRequest = (\n      requestFn,\n      apiVersion,\n      headers,\n      requestRetries,\n      retryAfter\n    ) => {\n      return setTimeout(\n        requestFn,\n        this._getSleepTimeInMS(requestRetries, retryAfter),\n        apiVersion,\n        headers,\n        requestRetries + 1\n      );\n    };\n\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout =\n        options.settings &&\n        Number.isInteger(options.settings.timeout) &&\n        options.settings.timeout >= 0\n          ? options.settings.timeout\n          : this._stripe.getApiField('timeout');\n\n      const req = this._stripe\n        .getApiField('httpClient')\n        .makeRequest(\n          host || this._stripe.getApiField('host'),\n          this._stripe.getApiField('port'),\n          path,\n          method,\n          headers,\n          requestData,\n          this._stripe.getApiField('protocol'),\n          timeout\n        );\n\n      const requestStartTime = Date.now();\n\n      const requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime,\n      });\n\n      const requestRetries = numRetries || 0;\n\n      const maxRetries = this._getMaxNetworkRetries(options.settings);\n\n      this._stripe._emitter.emit('request', requestEvent);\n\n      req\n        .then((res) => {\n          if (this._shouldRetry(res, requestRetries, maxRetries)) {\n            return retryRequest(\n              makeRequest,\n              apiVersion,\n              headers,\n              requestRetries,\n              res.getHeaders()['retry-after']\n            );\n          } else if (options.streaming && res.getStatusCode() < 400) {\n            return this._streamingResponseHandler(requestEvent, callback)(res);\n          } else {\n            return this._jsonResponseHandler(requestEvent, callback)(res);\n          }\n        })\n        .catch((error) => {\n          if (this._shouldRetry(null, requestRetries, maxRetries, error)) {\n            return retryRequest(\n              makeRequest,\n              apiVersion,\n              headers,\n              requestRetries,\n              null\n            );\n          } else {\n            const isTimeoutError =\n              error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n\n            return callback.call(\n              this,\n              new StripeConnectionError({\n                message: isTimeoutError\n                  ? `Request aborted due to timeout being reached (${timeout}ms)`\n                  : this._generateConnectionErrorMessage(requestRetries),\n                detail: error,\n              })\n            );\n          }\n        });\n    };\n\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      this._stripe.getClientUserAgent((clientUserAgent) => {\n        const apiVersion = this._stripe.getApiField('version');\n        const headers = this._makeHeaders(\n          auth,\n          requestData.length,\n          apiVersion,\n          clientUserAgent,\n          method,\n          options.headers,\n          options.settings\n        );\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(\n        method,\n        data,\n        options.headers,\n        prepareAndMakeRequest\n      );\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  },\n};\n\nmodule.exports = StripeResource;\n"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,eAOIA,OAAO,CAAC,SAAD,CAPX;AAAA,IACEC,qBADF,YACEA,qBADF;AAAA,IAEEC,yBAFF,YAEEA,yBAFF;AAAA,IAGEC,qBAHF,YAGEA,qBAHF;AAAA,IAIEC,oBAJF,YAIEA,oBAJF;AAAA,IAKEC,WALF,YAKEA,WALF;AAAA,IAMEC,cANF,YAMEA,cANF;;AASA,gBAAqBN,OAAO,CAAC,kBAAD,CAA5B;AAAA,IAAOO,UAAP,aAAOA,UAAP,C,CAEA;;;AACAC,cAAc,CAACC,MAAf,GAAwBV,KAAK,CAACW,WAA9B,C,CAEA;;AACAF,cAAc,CAACG,MAAf,GAAwBX,OAAO,CAAC,gBAAD,CAA/B;AACAQ,cAAc,CAACI,aAAf,GAA+BZ,OAAO,CAAC,sBAAD,CAAtC;AAEAQ,cAAc,CAACK,4BAAf,GAA8C,GAA9C;AACA,IAAMC,oBAAoB,GAAG,EAA7B;AAEA;AACA;AACA;;AACA,SAASN,cAAT,CAAwBO,MAAxB,EAAgCC,iBAAhC,EAAmD;EACjD,KAAKC,OAAL,GAAeF,MAAf;;EACA,IAAIC,iBAAJ,EAAuB;IACrB,MAAM,IAAIE,KAAJ,CACJ,0FADI,CAAN;EAGD;;EAED,KAAKC,QAAL,GAAgBpB,KAAK,CAACqB,mBAAN,CACd,KAAKD,QAAL,IAAiBJ,MAAM,CAACM,WAAP,CAAmB,UAAnB,CADH,CAAhB;EAGA,KAAKC,YAAL,GAAoB,KAAKC,IAAzB;EACA,KAAKA,IAAL,GAAYxB,KAAK,CAACqB,mBAAN,CAA0B,KAAKG,IAA/B,CAAZ,CAZiD,CAcjD;EACA;;EACA,IAAI,KAAKC,YAAT,EAAuB;IACrB,KAAKA,YAAL,CAAkBC,OAAlB,CAA0B,UAASC,UAAT,EAAqB;MAC7C,KAAKA,UAAL,IAAmBlB,cAAc,CAACI,aAAf,CAA6Bc,UAA7B,CAAnB;IACD,CAFD,EAEG,IAFH;EAGD;;EAED,KAAKC,UAAL,aAAmBC,SAAnB;AACD;;AAEDpB,cAAc,CAACqB,SAAf,GAA2B;EACzBN,IAAI,EAAE,EADmB;EAGzB;EACAJ,QAAQ,EAAE,IAJe;EAMzBQ,UANyB,wBAMZ,CAAE,CANU;EAQzB;EACA;EACA;EACA;EACAG,oBAAoB,EAAE,IAZG;EAczB;EACA;EACAC,eAAe,EAAE,IAhBQ;EAkBzBC,cAlByB,0BAkBVC,WAlBU,EAkBGC,OAlBH,EAkBY;IACnC,OAAO,KAAKC,aAAL,CAAmB,CACxB,KAAKhB,QAAL,CAAce,OAAd,CADwB,EAExB,KAAKX,IAAL,CAAUW,OAAV,CAFwB,EAGxB,OAAOD,WAAP,IAAsB,UAAtB,GAAmCA,WAAW,CAACC,OAAD,CAA9C,GAA0DD,WAHlC,CAAnB,CAAP;EAKD,CAxBwB;EA0BzB;EACA;EACA;EACAG,6BA7ByB,yCA6BKC,eA7BL,EA6BsB;IAC7C,kBAAW,KAAKF,aAAL,CAAmB,CAAC,KAAKb,YAAN,EAAoBe,eAAe,IAAI,EAAvC,CAAnB,CAAX;EACD,CA/BwB;EAiCzBF,aAjCyB,yBAiCXG,KAjCW,EAiCJ;IACnB;IACA;IACA;IACA;IACA,IAAMf,IAAI,GAAGe,KAAK,CAACC,IAAN,CAAW,GAAX,EAAgBC,OAAhB,CAAwB,SAAxB,EAAmC,GAAnC,CAAb,CALmB,CAOnB;IACA;;IACA,OAAOjB,IAAI,CAACkB,QAAL,CAAc,GAAd,IAAqBlB,IAAI,CAACmB,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAArB,GAAyCnB,IAAhD;EACD,CA3CwB;EA6CzB;EACAoB,WAAW,EAAE5C,KAAK,CAAC6C,6BA9CM;EAgDzBC,eAhDyB,2BAgDTC,OAhDS,EAgDAC,GAhDA,EAgDKC,QAhDL,EAgDe;IACtC,OAAO,YAAM;MACX,IAAMC,UAAU,GAAG,IAAIC,SAAJ,CAAc,WAAd,CAAnB;MACAD,UAAU,CAACE,IAAX,GAAkB,WAAlB;MAEAJ,GAAG,CAACK,OAAJ,CAAYH,UAAZ;IACD,CALD;EAMD,CAvDwB;EAyDzBI,2BAzDyB,uCAyDGC,GAzDH,EAyDQC,OAzDR,EAyDiB;IACxC;IACA;IAEA;IACAD,GAAG,CAACE,SAAJ,GAAgBD,OAAO,CAAC,YAAD,CAAvB;IACAD,GAAG,CAACG,aAAJ,GAAoBH,GAAG,CAACG,aAAJ,IAAqBF,OAAO,CAAC,gBAAD,CAAhD;IACAD,GAAG,CAACI,UAAJ,GAAiBJ,GAAG,CAACI,UAAJ,IAAkBH,OAAO,CAAC,gBAAD,CAA1C;IACAD,GAAG,CAACK,cAAJ,GAAqBL,GAAG,CAACK,cAAJ,IAAsBJ,OAAO,CAAC,iBAAD,CAAlD;EACD,CAlEwB;EAoEzBK,kBApEyB,8BAoENC,YApEM,EAoEQC,UApER,EAoEoBP,OApEpB,EAoE6B;IACpD,IAAMQ,cAAc,GAAGC,IAAI,CAACC,GAAL,EAAvB;IACA,IAAMC,iBAAiB,GAAGH,cAAc,GAAGF,YAAY,CAACM,kBAAxD;IAEA,OAAOpE,KAAK,CAACqE,aAAN,CAAoB;MACzBC,WAAW,EAAEd,OAAO,CAAC,gBAAD,CADK;MAEzBe,OAAO,EAAEf,OAAO,CAAC,gBAAD,CAFS;MAGzBgB,eAAe,EAAEhB,OAAO,CAAC,iBAAD,CAHC;MAIzB5C,MAAM,EAAEkD,YAAY,CAAClD,MAJI;MAKzBY,IAAI,EAAEsC,YAAY,CAACtC,IALM;MAMzBiD,MAAM,EAAEV,UANiB;MAOzBW,UAAU,EAAE,KAAKC,aAAL,CAAmBnB,OAAnB,CAPa;MAQzBoB,OAAO,EAAET,iBARgB;MASzBC,kBAAkB,EAAEN,YAAY,CAACM,kBATR;MAUzBS,gBAAgB,EAAEb;IAVO,CAApB,CAAP;EAYD,CApFwB;EAsFzBW,aAtFyB,yBAsFXnB,OAtFW,EAsFF;IACrB,OAAOA,OAAO,CAAC,YAAD,CAAd;EACD,CAxFwB;;EA0FzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,yBApGyB,qCAoGChB,YApGD,EAoGeb,QApGf,EAoGyB;IAAA;;IAChD,OAAO,UAAC8B,GAAD,EAAS;MACd,IAAMvB,OAAO,GAAGuB,GAAG,CAACC,UAAJ,EAAhB;;MAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;QACnC,IAAMC,aAAa,GAAG,KAAI,CAACrB,kBAAL,CACpBC,YADoB,EAEpBiB,GAAG,CAACI,aAAJ,EAFoB,EAGpB3B,OAHoB,CAAtB;;QAKA,KAAI,CAACtC,OAAL,CAAakE,QAAb,CAAsBC,IAAtB,CAA2B,UAA3B,EAAuCH,aAAvC;;QACA,KAAI,CAACI,qBAAL,CACE,KAAI,CAACX,aAAL,CAAmBnB,OAAnB,CADF,EAEE0B,aAAa,CAACN,OAFhB;MAID,CAXD;;MAaA,IAAMW,MAAM,GAAGR,GAAG,CAACS,QAAJ,CAAaP,sBAAb,CAAf,CAhBc,CAkBd;MACA;MACA;;MACA,KAAI,CAAC3B,2BAAL,CAAiCiC,MAAjC,EAAyC/B,OAAzC;;MAEA,OAAOP,QAAQ,CAAC,IAAD,EAAOsC,MAAP,CAAf;IACD,CAxBD;EAyBD,CA9HwB;;EAgIzB;AACF;AACA;AACA;AACA;EACEE,oBArIyB,gCAqIJ3B,YArII,EAqIUb,QArIV,EAqIoB;IAAA;;IAC3C,OAAO,UAAC8B,GAAD,EAAS;MACd,IAAMvB,OAAO,GAAGuB,GAAG,CAACC,UAAJ,EAAhB;;MACA,IAAMvB,SAAS,GAAG,MAAI,CAACkB,aAAL,CAAmBnB,OAAnB,CAAlB;;MACA,IAAMO,UAAU,GAAGgB,GAAG,CAACI,aAAJ,EAAnB;;MAEA,IAAMD,aAAa,GAAG,MAAI,CAACrB,kBAAL,CACpBC,YADoB,EAEpBC,UAFoB,EAGpBP,OAHoB,CAAtB;;MAKA,MAAI,CAACtC,OAAL,CAAakE,QAAb,CAAsBC,IAAtB,CAA2B,UAA3B,EAAuCH,aAAvC;;MAEAH,GAAG,CACAW,MADH,GAEGC,IAFH,CAGI,UAACC,YAAD,EAAkB;QAChB,IAAIA,YAAY,CAACC,KAAjB,EAAwB;UACtB,IAAIC,GAAJ,CADsB,CAGtB;UACA;;UACA,IAAI,OAAOF,YAAY,CAACC,KAApB,KAA8B,QAAlC,EAA4C;YAC1CD,YAAY,CAACC,KAAb,GAAqB;cACnBE,IAAI,EAAEH,YAAY,CAACC,KADA;cAEnBG,OAAO,EAAEJ,YAAY,CAACK;YAFH,CAArB;UAID;;UAEDL,YAAY,CAACC,KAAb,CAAmBrC,OAAnB,GAA6BA,OAA7B;UACAoC,YAAY,CAACC,KAAb,CAAmB9B,UAAnB,GAAgCA,UAAhC;UACA6B,YAAY,CAACC,KAAb,CAAmBpC,SAAnB,GAA+BA,SAA/B;;UAEA,IAAIM,UAAU,KAAK,GAAnB,EAAwB;YACtB+B,GAAG,GAAG,IAAI3F,yBAAJ,CAA8ByF,YAAY,CAACC,KAA3C,CAAN;UACD,CAFD,MAEO,IAAI9B,UAAU,KAAK,GAAnB,EAAwB;YAC7B+B,GAAG,GAAG,IAAI1F,qBAAJ,CAA0BwF,YAAY,CAACC,KAAvC,CAAN;UACD,CAFM,MAEA,IAAI9B,UAAU,KAAK,GAAnB,EAAwB;YAC7B+B,GAAG,GAAG,IAAIzF,oBAAJ,CAAyBuF,YAAY,CAACC,KAAtC,CAAN;UACD,CAFM,MAEA;YACLC,GAAG,GAAGxF,WAAW,CAAC4F,QAAZ,CAAqBN,YAAY,CAACC,KAAlC,CAAN;UACD;;UAED,MAAMC,GAAN;QACD;;QAED,OAAOF,YAAP;MACD,CAlCL,EAmCI,UAACO,CAAD,EAAO;QACL,MAAM,IAAI5F,cAAJ,CAAmB;UACvByF,OAAO,EAAE,2CADc;UAEvBI,SAAS,EAAED,CAFY;UAGvB1C,SAAS,EAAED,OAAO,CAAC,YAAD;QAHK,CAAnB,CAAN;MAKD,CAzCL,EA2CGmC,IA3CH,CA4CI,UAACC,YAAD,EAAkB;QAChB,MAAI,CAACN,qBAAL,CAA2B7B,SAA3B,EAAsCyB,aAAa,CAACN,OAApD,EADgB,CAGhB;;;QACA,IAAMyB,WAAW,GAAGtB,GAAG,CAACuB,cAAJ,EAApB;;QACA,MAAI,CAAChD,2BAAL,CAAiC+C,WAAjC,EAA8C7C,OAA9C;;QACA+C,MAAM,CAACC,cAAP,CAAsBZ,YAAtB,EAAoC,cAApC,EAAoD;UAClDa,UAAU,EAAE,KADsC;UAElDC,QAAQ,EAAE,KAFwC;UAGlDC,KAAK,EAAEN;QAH2C,CAApD;QAMApD,QAAQ,CAAC2D,IAAT,CAAc,MAAd,EAAoB,IAApB,EAA0BhB,YAA1B;MACD,CAzDL,EA0DI,UAACO,CAAD;QAAA,OAAOlD,QAAQ,CAAC2D,IAAT,CAAc,MAAd,EAAoBT,CAApB,EAAuB,IAAvB,CAAP;MAAA,CA1DJ;IA4DD,CAxED;EAyED,CA/MwB;EAiNzBU,+BAjNyB,2CAiNOC,cAjNP,EAiNuB;IAC9C,iEACEA,cAAc,GAAG,CAAjB,kCAA6CA,cAA7C,eAAuE,EADzE;EAGD,CArNwB;EAuNzBC,aAvNyB,yBAuNX/D,GAvNW,EAuNN8D,cAvNM,EAuNU7D,QAvNV,EAuNoB;IAAA;;IAC3C,OAAO,UAAC+C,OAAD,EAAUgB,MAAV,EAAqB;MAC1B/D,QAAQ,CAAC2D,IAAT,CACE,MADF,EAEE,IAAI1G,qBAAJ,CAA0B;QACxB8F,OAAO,EAAE,MAAI,CAACa,+BAAL,CAAqCC,cAArC,CADe;QAExBE,MAAM,EAAEnB;MAFgB,CAA1B,CAFF,EAME,IANF;IAQD,CATD;EAUD,CAlOwB;EAoOzB;EACAoB,YArOyB,wBAqOZlC,GArOY,EAqOPmC,UArOO,EAqOKC,UArOL,EAqOiBtB,KArOjB,EAqOwB;IAC/C,IACEA,KAAK,IACLqB,UAAU,KAAK,CADf,IAEA1G,UAAU,CAAC4G,6BAAX,CAAyCC,QAAzC,CAAkDxB,KAAK,CAACzC,IAAxD,CAHF,EAIE;MACA,OAAO,IAAP;IACD,CAP8C,CAS/C;;;IACA,IAAI8D,UAAU,IAAIC,UAAlB,EAA8B;MAC5B,OAAO,KAAP;IACD,CAZ8C,CAc/C;;;IACA,IAAI,CAACpC,GAAL,EAAU;MACR,OAAO,IAAP;IACD,CAjB8C,CAmB/C;IACA;;;IACA,IAAIA,GAAG,CAACC,UAAJ,GAAiB,qBAAjB,MAA4C,OAAhD,EAAyD;MACvD,OAAO,KAAP;IACD;;IACD,IAAID,GAAG,CAACC,UAAJ,GAAiB,qBAAjB,MAA4C,MAAhD,EAAwD;MACtD,OAAO,IAAP;IACD,CA1B8C,CA4B/C;;;IACA,IAAID,GAAG,CAACI,aAAJ,OAAwB,GAA5B,EAAiC;MAC/B,OAAO,IAAP;IACD,CA/B8C,CAiC/C;IACA;IACA;IACA;IACA;;;IACA,IAAIJ,GAAG,CAACI,aAAJ,MAAuB,GAA3B,EAAgC;MAC9B,OAAO,IAAP;IACD;;IAED,OAAO,KAAP;EACD,CAhRwB;EAkRzBmC,iBAlRyB,6BAkRPJ,UAlRO,EAkRwB;IAAA,IAAnBK,UAAmB,uEAAN,IAAM;;IAC/C,IAAMC,wBAAwB,GAAG,KAAKtG,OAAL,CAAauG,2BAAb,EAAjC;;IACA,IAAMC,oBAAoB,GAAG,KAAKxG,OAAL,CAAayG,uBAAb,EAA7B,CAF+C,CAI/C;IACA;IACA;;;IACA,IAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CACjBN,wBAAwB,GAAGK,IAAI,CAACE,GAAL,CAASb,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CADV,EAEjBQ,oBAFiB,CAAnB,CAP+C,CAY/C;IACA;;IACAE,YAAY,IAAI,OAAO,IAAIC,IAAI,CAACG,MAAL,EAAX,CAAhB,CAd+C,CAgB/C;;IACAJ,YAAY,GAAGC,IAAI,CAACI,GAAL,CAAST,wBAAT,EAAmCI,YAAnC,CAAf,CAjB+C,CAmB/C;;IACA,IAAIM,MAAM,CAACC,SAAP,CAAiBZ,UAAjB,KAAgCA,UAAU,IAAIxG,oBAAlD,EAAwE;MACtE6G,YAAY,GAAGC,IAAI,CAACI,GAAL,CAASL,YAAT,EAAuBL,UAAvB,CAAf;IACD;;IAED,OAAOK,YAAY,GAAG,IAAtB;EACD,CA3SwB;EA6SzB;EACAQ,qBA9SyB,mCA8SY;IAAA,IAAfC,QAAe,uEAAJ,EAAI;IACnC,OAAOA,QAAQ,CAACC,iBAAT,IACLJ,MAAM,CAACC,SAAP,CAAiBE,QAAQ,CAACC,iBAA1B,CADK,GAEHD,QAAQ,CAACC,iBAFN,GAGH,KAAKpH,OAAL,CAAaqH,oBAAb,EAHJ;EAID,CAnTwB;EAqTzBC,sBArTyB,kCAqTF5H,MArTE,EAqTMyH,QArTN,EAqTgB;IACvC;IACA,IAAMlB,UAAU,GAAG,KAAKiB,qBAAL,CAA2BC,QAA3B,CAAnB;;IAEA,IAAIzH,MAAM,KAAK,MAAX,IAAqBuG,UAAU,GAAG,CAAtC,EAAyC;MACvC,mCAA4BnH,KAAK,CAACyI,KAAN,EAA5B;IACD;;IACD,OAAO,IAAP;EACD,CA7TwB;EA+TzBC,YA/TyB,wBAgUvBC,IAhUuB,EAiUvBC,aAjUuB,EAkUvBjF,UAlUuB,EAmUvBkF,eAnUuB,EAoUvBjI,MApUuB,EAqUvBkI,mBArUuB,EAsUvBC,oBAtUuB,EAuUvB;IACA,IAAMC,cAAc,GAAG;MACrB;MACAC,aAAa,EAAEN,IAAI,oBAAaA,IAAb,IAAsB,KAAKzH,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAFpB;MAGrB4H,MAAM,EAAE,kBAHa;MAIrB,gBAAgB,mCAJK;MAKrB,cAAc,KAAKC,mBAAL,EALO;MAMrB,8BAA8BN,eANT;MAOrB,6BAA6B,KAAKO,mBAAL,EAPR;MAQrB,kBAAkBzF,UARG;MASrB,kBAAkB,KAAKzC,OAAL,CAAaI,WAAb,CAAyB,eAAzB,CATG;MAUrB,mBAAmB,KAAKkH,sBAAL,CACjB5H,MADiB,EAEjBmI,oBAFiB;IAVE,CAAvB,CADA,CAiBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,IAAMM,gBAAgB,GACpBzI,MAAM,IAAI,MAAV,IAAoBA,MAAM,IAAI,KAA9B,IAAuCA,MAAM,IAAI,OADnD,CA7BA,CAgCA;IACA;IACA;IACA;;IACA,IAAIyI,gBAAgB,IAAIT,aAAxB,EAAuC;MACrC,IAAI,CAACS,gBAAL,EAAuB;QACrBrJ,KAAK,CAACsJ,WAAN,WACK1I,MADL;MAGD;;MACDoI,cAAc,CAAC,gBAAD,CAAd,GAAmCJ,aAAnC;IACD;;IAED,OAAOrC,MAAM,CAACgD,MAAP,CACLvJ,KAAK,CAACqE,aAAN,CAAoB2E,cAApB,CADK,EAEL;IACAhJ,KAAK,CAACwJ,gBAAN,CAAuBV,mBAAvB,CAHK,CAAP;EAKD,CAzXwB;EA2XzBK,mBA3XyB,iCA2XH;IACpB,IAAMM,cAAc,GAAG,KAAKvI,OAAL,CAAawI,WAAb,CAAyB,iBAAzB,CAAvB;;IACA,IAAMC,OAAO,GAAG,KAAKzI,OAAL,CAAa0I,QAAb,GACZ,KAAK1I,OAAL,CAAa2I,kBAAb,EADY,GAEZ,EAFJ;IAIA,OAAO,iCAA0BJ,cAA1B,cAA4CE,OAA5C,EAAsDG,IAAtD,EAAP;EACD,CAlYwB;EAoYzBV,mBApYyB,iCAoYH;IACpB,IACE,KAAKlI,OAAL,CAAa6I,mBAAb,MACA,KAAK7I,OAAL,CAAa8I,mBAAb,CAAiCC,MAAjC,GAA0C,CAF5C,EAGE;MACA,IAAMC,OAAO,GAAG,KAAKhJ,OAAL,CAAa8I,mBAAb,CAAiCG,KAAjC,EAAhB;;MACA,OAAOC,IAAI,CAACC,SAAL,CAAe;QACpBC,oBAAoB,EAAEJ;MADF,CAAf,CAAP;IAGD;EACF,CA9YwB;EAgZzB5E,qBAhZyB,iCAgZH7B,SAhZG,EAgZQU,iBAhZR,EAgZ2B;IAClD,IAAI,KAAKjD,OAAL,CAAa6I,mBAAb,MAAsCtG,SAA1C,EAAqD;MACnD,IACE,KAAKvC,OAAL,CAAa8I,mBAAb,CAAiCC,MAAjC,GACAxJ,cAAc,CAACK,4BAFjB,EAGE;QACAd,KAAK,CAACsJ,WAAN,CACE,6DADF;MAGD,CAPD,MAOO;QACL,KAAKpI,OAAL,CAAa8I,mBAAb,CAAiCO,IAAjC,CAAsC;UACpC7F,UAAU,EAAEjB,SADwB;UAEpC+G,mBAAmB,EAAErG;QAFe,CAAtC;MAID;IACF;EACF,CAhawB;EAkazBsG,QAlayB,oBAkahB7J,MAlagB,EAkaR8J,IAlaQ,EAkaFlJ,IAlaE,EAkaImJ,IAlaJ,EAkaUhC,IAlaV,EAkawC;IAAA;;IAAA,IAAxBiC,OAAwB,uEAAd,EAAc;IAAA,IAAV3H,QAAU;IAC/D,IAAI4H,WAAJ;;IAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CACnBC,SADmB,EAEnBpH,UAFmB,EAGnBH,OAHmB,EAInBsD,cAJmB,EAKnBS,UALmB,EAMhB;MACH,OAAOyD,UAAU,CACfD,SADe,EAEf,MAAI,CAACzD,iBAAL,CAAuBR,cAAvB,EAAuCS,UAAvC,CAFe,EAGf5D,UAHe,EAIfH,OAJe,EAKfsD,cAAc,GAAG,CALF,CAAjB;IAOD,CAdD;;IAgBA,IAAMmE,WAAW,GAAG,SAAdA,WAAc,CAACtH,UAAD,EAAaH,OAAb,EAAsB0D,UAAtB,EAAqC;MACvD;MACA,IAAMnE,OAAO,GACX6H,OAAO,CAACvC,QAAR,IACAH,MAAM,CAACC,SAAP,CAAiByC,OAAO,CAACvC,QAAR,CAAiBtF,OAAlC,CADA,IAEA6H,OAAO,CAACvC,QAAR,CAAiBtF,OAAjB,IAA4B,CAF5B,GAGI6H,OAAO,CAACvC,QAAR,CAAiBtF,OAHrB,GAII,MAAI,CAAC7B,OAAL,CAAaI,WAAb,CAAyB,SAAzB,CALN;;MAOA,IAAM0B,GAAG,GAAG,MAAI,CAAC9B,OAAL,CACTI,WADS,CACG,YADH,EAET2J,WAFS,CAGRP,IAAI,IAAI,MAAI,CAACxJ,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAHA,EAIR,MAAI,CAACJ,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAJQ,EAKRE,IALQ,EAMRZ,MANQ,EAOR4C,OAPQ,EAQRqH,WARQ,EASR,MAAI,CAAC3J,OAAL,CAAaI,WAAb,CAAyB,UAAzB,CATQ,EAURyB,OAVQ,CAAZ;;MAaA,IAAMmI,gBAAgB,GAAGjH,IAAI,CAACC,GAAL,EAAzB;MAEA,IAAMJ,YAAY,GAAG9D,KAAK,CAACqE,aAAN,CAAoB;QACvCC,WAAW,EAAEX,UAD0B;QAEvCY,OAAO,EAAEf,OAAO,CAAC,gBAAD,CAFuB;QAGvCgB,eAAe,EAAEhB,OAAO,CAAC,iBAAD,CAHe;QAIvC5C,MAAM,EAANA,MAJuC;QAKvCY,IAAI,EAAJA,IALuC;QAMvC4C,kBAAkB,EAAE8G;MANmB,CAApB,CAArB;MASA,IAAMpE,cAAc,GAAGI,UAAU,IAAI,CAArC;;MAEA,IAAMC,UAAU,GAAG,MAAI,CAACiB,qBAAL,CAA2BwC,OAAO,CAACvC,QAAnC,CAAnB;;MAEA,MAAI,CAACnH,OAAL,CAAakE,QAAb,CAAsBC,IAAtB,CAA2B,SAA3B,EAAsCvB,YAAtC;;MAEAd,GAAG,CACA2C,IADH,CACQ,UAACZ,GAAD,EAAS;QACb,IAAI,MAAI,CAACkC,YAAL,CAAkBlC,GAAlB,EAAuB+B,cAAvB,EAAuCK,UAAvC,CAAJ,EAAwD;UACtD,OAAO2D,YAAY,CACjBG,WADiB,EAEjBtH,UAFiB,EAGjBH,OAHiB,EAIjBsD,cAJiB,EAKjB/B,GAAG,CAACC,UAAJ,GAAiB,aAAjB,CALiB,CAAnB;QAOD,CARD,MAQO,IAAI4F,OAAO,CAACO,SAAR,IAAqBpG,GAAG,CAACI,aAAJ,KAAsB,GAA/C,EAAoD;UACzD,OAAO,MAAI,CAACL,yBAAL,CAA+BhB,YAA/B,EAA6Cb,QAA7C,EAAuD8B,GAAvD,CAAP;QACD,CAFM,MAEA;UACL,OAAO,MAAI,CAACU,oBAAL,CAA0B3B,YAA1B,EAAwCb,QAAxC,EAAkD8B,GAAlD,CAAP;QACD;MACF,CAfH,EAgBGqG,KAhBH,CAgBS,UAACvF,KAAD,EAAW;QAChB,IAAI,MAAI,CAACoB,YAAL,CAAkB,IAAlB,EAAwBH,cAAxB,EAAwCK,UAAxC,EAAoDtB,KAApD,CAAJ,EAAgE;UAC9D,OAAOiF,YAAY,CACjBG,WADiB,EAEjBtH,UAFiB,EAGjBH,OAHiB,EAIjBsD,cAJiB,EAKjB,IALiB,CAAnB;QAOD,CARD,MAQO;UACL,IAAMuE,cAAc,GAClBxF,KAAK,CAACzC,IAAN,IAAcyC,KAAK,CAACzC,IAAN,KAAe5C,UAAU,CAAC8K,kBAD1C;UAGA,OAAOrI,QAAQ,CAAC2D,IAAT,CACL,MADK,EAEL,IAAI1G,qBAAJ,CAA0B;YACxB8F,OAAO,EAAEqF,cAAc,2DAC8BtI,OAD9B,WAEnB,MAAI,CAAC8D,+BAAL,CAAqCC,cAArC,CAHoB;YAIxBE,MAAM,EAAEnB;UAJgB,CAA1B,CAFK,CAAP;QASD;MACF,CAvCH;IAwCD,CA/ED;;IAiFA,IAAM0F,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC1F,KAAD,EAAQ8E,IAAR,EAAiB;MAC7C,IAAI9E,KAAJ,EAAW;QACT,OAAO5C,QAAQ,CAAC4C,KAAD,CAAf;MACD;;MAEDgF,WAAW,GAAGF,IAAd;;MAEA,MAAI,CAACzJ,OAAL,CAAasK,kBAAb,CAAgC,UAAC3C,eAAD,EAAqB;QACnD,IAAMlF,UAAU,GAAG,MAAI,CAACzC,OAAL,CAAaI,WAAb,CAAyB,SAAzB,CAAnB;;QACA,IAAMkC,OAAO,GAAG,MAAI,CAACkF,YAAL,CACdC,IADc,EAEdkC,WAAW,CAACZ,MAFE,EAGdtG,UAHc,EAIdkF,eAJc,EAKdjI,MALc,EAMdgK,OAAO,CAACpH,OANM,EAOdoH,OAAO,CAACvC,QAPM,CAAhB;;QAUA4C,WAAW,CAACtH,UAAD,EAAaH,OAAb,CAAX;MACD,CAbD;IAcD,CArBD;;IAuBA,IAAI,KAAKzB,oBAAT,EAA+B;MAC7B,KAAKA,oBAAL,CACEnB,MADF,EAEE+J,IAFF,EAGEC,OAAO,CAACpH,OAHV,EAIE+H,qBAJF;IAMD,CAPD,MAOO;MACLA,qBAAqB,CAAC,IAAD,EAAOvL,KAAK,CAACyL,oBAAN,CAA2Bd,IAAI,IAAI,EAAnC,CAAP,CAArB;IACD;EACF;AAviBwB,CAA3B;AA0iBAe,MAAM,CAACC,OAAP,GAAiBlL,cAAjB"},"metadata":{},"sourceType":"script"}